# 基于MediaCrawler增强的微博爬取系统 - 生产环境构建
# Multi-stage build for optimized production image
FROM node:20-alpine AS base

# Install dependencies for building native modules and Playwright
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    nasm \
    && ln -sf python3 /usr/bin/python

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml ./
COPY apps/crawler/package.json ./apps/crawler/
COPY packages/* ./packages/

# Install pnpm
RUN npm install -g pnpm

# Install dependencies
RUN pnpm install --frozen-lockfile --prod=false

# Build stage
FROM base AS builder

# Install all dependencies including dev dependencies
RUN pnpm install --frozen-lockfile

# Build the application
RUN pnpm run build:crawler

# Production stage
FROM node:20-alpine AS production

# Install runtime dependencies
RUN apk add --no-cache \
    dumb-init \
    curl \
    && rm -rf /var/cache/apk/*

# Create non-root user for security
RUN addgroup -g 1001 -S pro && \
    adduser -S pro -u 1001

# Set working directory
WORKDIR /app

# Copy pnpm
COPY --from=base /usr/local/bin/pnpm /usr/local/bin/pnpm

# Copy built application and production dependencies
COPY --from=builder /app/dist ./dist
COPY --from=builder /apps/crawler/package.json ./
COPY --from=builder /packages ./packages
COPY --from=builder /node_modules ./node_modules

# Install Playwright browsers
RUN npx playwright install chromium --with-deps

# Set proper permissions
RUN chown -R pro:pro /app
USER pro

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Expose port
EXPOSE 3000

# Use dumb-init as PID 1 for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/main"]