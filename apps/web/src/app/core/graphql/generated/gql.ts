/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "mutation Login($input: LoginDto!) {\n  login(input: $input) {\n    accessToken\n    refreshToken\n    user {\n      id\n      username\n      email\n      status\n      createdAt\n      updatedAt\n    }\n  }\n}\n\nmutation Register($input: RegisterDto!) {\n  register(input: $input) {\n    accessToken\n    refreshToken\n    user {\n      id\n      username\n      email\n      status\n      createdAt\n      updatedAt\n    }\n  }\n}\n\nmutation Refresh($input: RefreshTokenDto!) {\n  refreshToken(input: $input) {\n    accessToken\n    refreshToken\n    user {\n      id\n      username\n      email\n      status\n      createdAt\n      updatedAt\n    }\n  }\n}\n\nmutation Logout {\n  logout\n}\n\nquery Me {\n  me {\n    id\n    username\n    email\n    status\n    createdAt\n    updatedAt\n  }\n}": typeof types.LoginDocument,
    "query EventsForMap($filter: EventMapQueryInput) {\n  eventsForMap(filter: $filter) {\n    id\n    eventName\n    summary\n    occurTime\n    province\n    city\n    district\n    street\n    longitude\n    latitude\n    status\n    eventTypeId\n    industryTypeId\n  }\n}\n\nquery Events($filter: EventQueryInput) {\n  events(filter: $filter) {\n    edges {\n      node {\n        id\n        eventName\n        summary\n        occurTime\n        province\n        city\n        district\n        street\n        status\n        eventTypeId\n        industryTypeId\n      }\n    }\n  }\n}\n\nquery AmapKey {\n  configValue(type: AMAP_API_KEY) {\n    value\n  }\n}": typeof types.EventsForMapDocument,
    "query PublishedScreens($page: Int, $limit: Int) {\n  publishedScreens(page: $page, limit: $limit) {\n    edges {\n      node {\n        id\n        name\n        description\n        layout {\n          width\n          height\n          background\n          cols\n          rows\n          grid {\n            size\n            enabled\n          }\n        }\n        components {\n          id\n          type\n          position {\n            x\n            y\n            width\n            height\n            zIndex\n          }\n          config\n          dataSource {\n            type\n            url\n            data\n            refreshInterval\n          }\n        }\n        status\n        isDefault\n        createdBy\n        createdAt\n        updatedAt\n      }\n    }\n    totalCount\n  }\n}\n\nquery DefaultScreen {\n  defaultScreen {\n    id\n    name\n    description\n    layout {\n      width\n      height\n      background\n      cols\n      rows\n      grid {\n        size\n        enabled\n      }\n    }\n    components {\n      id\n      type\n      position {\n        x\n        y\n        width\n        height\n        zIndex\n      }\n      config\n      dataSource {\n        type\n        url\n        data\n        refreshInterval\n      }\n    }\n    status\n    isDefault\n    createdBy\n    createdAt\n    updatedAt\n  }\n}\n\nquery Screen($id: ID!) {\n  screen(id: $id) {\n    id\n    name\n    description\n    layout {\n      width\n      height\n      background\n      cols\n      rows\n      grid {\n        size\n        enabled\n      }\n    }\n    components {\n      id\n      type\n      position {\n        x\n        y\n        width\n        height\n        zIndex\n      }\n      config\n      dataSource {\n        type\n        url\n        data\n        refreshInterval\n      }\n    }\n    status\n    isDefault\n    createdBy\n    createdAt\n    updatedAt\n  }\n}": typeof types.PublishedScreensDocument,
    "query User($id: String!) {\n  user(id: $id) {\n    id\n    username\n    email\n    status\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateUser($id: String!, $input: UpdateUserDto!) {\n  updateUser(id: $id, input: $input) {\n    id\n    username\n    email\n    status\n    createdAt\n    updatedAt\n  }\n}": typeof types.UserDocument,
    "query WeiboAccountStats {\n  weiboAccountStats {\n    total\n    todayNew\n    online\n  }\n}": typeof types.WeiboAccountStatsDocument,
    "\n  mutation Login($input: LoginDto!) {\n    login(input: $input) {\n      accessToken\n      refreshToken\n      user {\n        id\n        username\n        email\n        status\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.LoginDocument,
    "\n  mutation Register($input: RegisterDto!) {\n    register(input: $input) {\n      accessToken\n      refreshToken\n      user {\n        id\n        username\n        email\n        status\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.RegisterDocument,
    "\n  mutation Refresh($input: RefreshTokenDto!) {\n    refreshToken(input: $input) {\n      accessToken\n      refreshToken\n      user {\n        id\n        username\n        email\n        status\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.RefreshDocument,
    "\n  mutation Logout {\n    logout\n  }\n": typeof types.LogoutDocument,
    "\n  query Me {\n    me {\n      id\n      username\n      email\n      status\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.MeDocument,
    "\n  query EventsForMap($filter: EventMapQueryInput) {\n    eventsForMap(filter: $filter) {\n      id\n      eventName\n      summary\n      occurTime\n      province\n      city\n      district\n      street\n      longitude\n      latitude\n      status\n      eventTypeId\n      industryTypeId\n    }\n  }\n": typeof types.EventsForMapDocument,
    "\n  query Events($filter: EventQueryInput) {\n    events(filter: $filter) {\n      edges {\n        node {\n          id\n          eventName\n          summary\n          occurTime\n          province\n          city\n          district\n          street\n          status\n          eventTypeId\n          industryTypeId\n        }\n      }\n    }\n  }\n": typeof types.EventsDocument,
    "\n  query AmapKey {\n    configValue(type: AMAP_API_KEY) {\n      value\n    }\n  }\n": typeof types.AmapKeyDocument,
    "\n  query User($id: String!) {\n    user(id: $id) {\n      id\n      username\n      email\n      status\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UserDocument,
    "\n  mutation UpdateUser($id: String!, $input: UpdateUserDto!) {\n    updateUser(id: $id, input: $input) {\n      id\n      username\n      email\n      status\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdateUserDocument,
    "\n  query WeiboAccountStats {\n    weiboAccountStats {\n      total\n      todayNew\n      online\n    }\n  }\n": typeof types.WeiboAccountStatsDocument,
};
const documents: Documents = {
    "mutation Login($input: LoginDto!) {\n  login(input: $input) {\n    accessToken\n    refreshToken\n    user {\n      id\n      username\n      email\n      status\n      createdAt\n      updatedAt\n    }\n  }\n}\n\nmutation Register($input: RegisterDto!) {\n  register(input: $input) {\n    accessToken\n    refreshToken\n    user {\n      id\n      username\n      email\n      status\n      createdAt\n      updatedAt\n    }\n  }\n}\n\nmutation Refresh($input: RefreshTokenDto!) {\n  refreshToken(input: $input) {\n    accessToken\n    refreshToken\n    user {\n      id\n      username\n      email\n      status\n      createdAt\n      updatedAt\n    }\n  }\n}\n\nmutation Logout {\n  logout\n}\n\nquery Me {\n  me {\n    id\n    username\n    email\n    status\n    createdAt\n    updatedAt\n  }\n}": types.LoginDocument,
    "query EventsForMap($filter: EventMapQueryInput) {\n  eventsForMap(filter: $filter) {\n    id\n    eventName\n    summary\n    occurTime\n    province\n    city\n    district\n    street\n    longitude\n    latitude\n    status\n    eventTypeId\n    industryTypeId\n  }\n}\n\nquery Events($filter: EventQueryInput) {\n  events(filter: $filter) {\n    edges {\n      node {\n        id\n        eventName\n        summary\n        occurTime\n        province\n        city\n        district\n        street\n        status\n        eventTypeId\n        industryTypeId\n      }\n    }\n  }\n}\n\nquery AmapKey {\n  configValue(type: AMAP_API_KEY) {\n    value\n  }\n}": types.EventsForMapDocument,
    "query PublishedScreens($page: Int, $limit: Int) {\n  publishedScreens(page: $page, limit: $limit) {\n    edges {\n      node {\n        id\n        name\n        description\n        layout {\n          width\n          height\n          background\n          cols\n          rows\n          grid {\n            size\n            enabled\n          }\n        }\n        components {\n          id\n          type\n          position {\n            x\n            y\n            width\n            height\n            zIndex\n          }\n          config\n          dataSource {\n            type\n            url\n            data\n            refreshInterval\n          }\n        }\n        status\n        isDefault\n        createdBy\n        createdAt\n        updatedAt\n      }\n    }\n    totalCount\n  }\n}\n\nquery DefaultScreen {\n  defaultScreen {\n    id\n    name\n    description\n    layout {\n      width\n      height\n      background\n      cols\n      rows\n      grid {\n        size\n        enabled\n      }\n    }\n    components {\n      id\n      type\n      position {\n        x\n        y\n        width\n        height\n        zIndex\n      }\n      config\n      dataSource {\n        type\n        url\n        data\n        refreshInterval\n      }\n    }\n    status\n    isDefault\n    createdBy\n    createdAt\n    updatedAt\n  }\n}\n\nquery Screen($id: ID!) {\n  screen(id: $id) {\n    id\n    name\n    description\n    layout {\n      width\n      height\n      background\n      cols\n      rows\n      grid {\n        size\n        enabled\n      }\n    }\n    components {\n      id\n      type\n      position {\n        x\n        y\n        width\n        height\n        zIndex\n      }\n      config\n      dataSource {\n        type\n        url\n        data\n        refreshInterval\n      }\n    }\n    status\n    isDefault\n    createdBy\n    createdAt\n    updatedAt\n  }\n}": types.PublishedScreensDocument,
    "query User($id: String!) {\n  user(id: $id) {\n    id\n    username\n    email\n    status\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateUser($id: String!, $input: UpdateUserDto!) {\n  updateUser(id: $id, input: $input) {\n    id\n    username\n    email\n    status\n    createdAt\n    updatedAt\n  }\n}": types.UserDocument,
    "query WeiboAccountStats {\n  weiboAccountStats {\n    total\n    todayNew\n    online\n  }\n}": types.WeiboAccountStatsDocument,
    "\n  mutation Login($input: LoginDto!) {\n    login(input: $input) {\n      accessToken\n      refreshToken\n      user {\n        id\n        username\n        email\n        status\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.LoginDocument,
    "\n  mutation Register($input: RegisterDto!) {\n    register(input: $input) {\n      accessToken\n      refreshToken\n      user {\n        id\n        username\n        email\n        status\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.RegisterDocument,
    "\n  mutation Refresh($input: RefreshTokenDto!) {\n    refreshToken(input: $input) {\n      accessToken\n      refreshToken\n      user {\n        id\n        username\n        email\n        status\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.RefreshDocument,
    "\n  mutation Logout {\n    logout\n  }\n": types.LogoutDocument,
    "\n  query Me {\n    me {\n      id\n      username\n      email\n      status\n      createdAt\n      updatedAt\n    }\n  }\n": types.MeDocument,
    "\n  query EventsForMap($filter: EventMapQueryInput) {\n    eventsForMap(filter: $filter) {\n      id\n      eventName\n      summary\n      occurTime\n      province\n      city\n      district\n      street\n      longitude\n      latitude\n      status\n      eventTypeId\n      industryTypeId\n    }\n  }\n": types.EventsForMapDocument,
    "\n  query Events($filter: EventQueryInput) {\n    events(filter: $filter) {\n      edges {\n        node {\n          id\n          eventName\n          summary\n          occurTime\n          province\n          city\n          district\n          street\n          status\n          eventTypeId\n          industryTypeId\n        }\n      }\n    }\n  }\n": types.EventsDocument,
    "\n  query AmapKey {\n    configValue(type: AMAP_API_KEY) {\n      value\n    }\n  }\n": types.AmapKeyDocument,
    "\n  query User($id: String!) {\n    user(id: $id) {\n      id\n      username\n      email\n      status\n      createdAt\n      updatedAt\n    }\n  }\n": types.UserDocument,
    "\n  mutation UpdateUser($id: String!, $input: UpdateUserDto!) {\n    updateUser(id: $id, input: $input) {\n      id\n      username\n      email\n      status\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdateUserDocument,
    "\n  query WeiboAccountStats {\n    weiboAccountStats {\n      total\n      todayNew\n      online\n    }\n  }\n": types.WeiboAccountStatsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation Login($input: LoginDto!) {\n  login(input: $input) {\n    accessToken\n    refreshToken\n    user {\n      id\n      username\n      email\n      status\n      createdAt\n      updatedAt\n    }\n  }\n}\n\nmutation Register($input: RegisterDto!) {\n  register(input: $input) {\n    accessToken\n    refreshToken\n    user {\n      id\n      username\n      email\n      status\n      createdAt\n      updatedAt\n    }\n  }\n}\n\nmutation Refresh($input: RefreshTokenDto!) {\n  refreshToken(input: $input) {\n    accessToken\n    refreshToken\n    user {\n      id\n      username\n      email\n      status\n      createdAt\n      updatedAt\n    }\n  }\n}\n\nmutation Logout {\n  logout\n}\n\nquery Me {\n  me {\n    id\n    username\n    email\n    status\n    createdAt\n    updatedAt\n  }\n}"): (typeof documents)["mutation Login($input: LoginDto!) {\n  login(input: $input) {\n    accessToken\n    refreshToken\n    user {\n      id\n      username\n      email\n      status\n      createdAt\n      updatedAt\n    }\n  }\n}\n\nmutation Register($input: RegisterDto!) {\n  register(input: $input) {\n    accessToken\n    refreshToken\n    user {\n      id\n      username\n      email\n      status\n      createdAt\n      updatedAt\n    }\n  }\n}\n\nmutation Refresh($input: RefreshTokenDto!) {\n  refreshToken(input: $input) {\n    accessToken\n    refreshToken\n    user {\n      id\n      username\n      email\n      status\n      createdAt\n      updatedAt\n    }\n  }\n}\n\nmutation Logout {\n  logout\n}\n\nquery Me {\n  me {\n    id\n    username\n    email\n    status\n    createdAt\n    updatedAt\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query EventsForMap($filter: EventMapQueryInput) {\n  eventsForMap(filter: $filter) {\n    id\n    eventName\n    summary\n    occurTime\n    province\n    city\n    district\n    street\n    longitude\n    latitude\n    status\n    eventTypeId\n    industryTypeId\n  }\n}\n\nquery Events($filter: EventQueryInput) {\n  events(filter: $filter) {\n    edges {\n      node {\n        id\n        eventName\n        summary\n        occurTime\n        province\n        city\n        district\n        street\n        status\n        eventTypeId\n        industryTypeId\n      }\n    }\n  }\n}\n\nquery AmapKey {\n  configValue(type: AMAP_API_KEY) {\n    value\n  }\n}"): (typeof documents)["query EventsForMap($filter: EventMapQueryInput) {\n  eventsForMap(filter: $filter) {\n    id\n    eventName\n    summary\n    occurTime\n    province\n    city\n    district\n    street\n    longitude\n    latitude\n    status\n    eventTypeId\n    industryTypeId\n  }\n}\n\nquery Events($filter: EventQueryInput) {\n  events(filter: $filter) {\n    edges {\n      node {\n        id\n        eventName\n        summary\n        occurTime\n        province\n        city\n        district\n        street\n        status\n        eventTypeId\n        industryTypeId\n      }\n    }\n  }\n}\n\nquery AmapKey {\n  configValue(type: AMAP_API_KEY) {\n    value\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query PublishedScreens($page: Int, $limit: Int) {\n  publishedScreens(page: $page, limit: $limit) {\n    edges {\n      node {\n        id\n        name\n        description\n        layout {\n          width\n          height\n          background\n          cols\n          rows\n          grid {\n            size\n            enabled\n          }\n        }\n        components {\n          id\n          type\n          position {\n            x\n            y\n            width\n            height\n            zIndex\n          }\n          config\n          dataSource {\n            type\n            url\n            data\n            refreshInterval\n          }\n        }\n        status\n        isDefault\n        createdBy\n        createdAt\n        updatedAt\n      }\n    }\n    totalCount\n  }\n}\n\nquery DefaultScreen {\n  defaultScreen {\n    id\n    name\n    description\n    layout {\n      width\n      height\n      background\n      cols\n      rows\n      grid {\n        size\n        enabled\n      }\n    }\n    components {\n      id\n      type\n      position {\n        x\n        y\n        width\n        height\n        zIndex\n      }\n      config\n      dataSource {\n        type\n        url\n        data\n        refreshInterval\n      }\n    }\n    status\n    isDefault\n    createdBy\n    createdAt\n    updatedAt\n  }\n}\n\nquery Screen($id: ID!) {\n  screen(id: $id) {\n    id\n    name\n    description\n    layout {\n      width\n      height\n      background\n      cols\n      rows\n      grid {\n        size\n        enabled\n      }\n    }\n    components {\n      id\n      type\n      position {\n        x\n        y\n        width\n        height\n        zIndex\n      }\n      config\n      dataSource {\n        type\n        url\n        data\n        refreshInterval\n      }\n    }\n    status\n    isDefault\n    createdBy\n    createdAt\n    updatedAt\n  }\n}"): (typeof documents)["query PublishedScreens($page: Int, $limit: Int) {\n  publishedScreens(page: $page, limit: $limit) {\n    edges {\n      node {\n        id\n        name\n        description\n        layout {\n          width\n          height\n          background\n          cols\n          rows\n          grid {\n            size\n            enabled\n          }\n        }\n        components {\n          id\n          type\n          position {\n            x\n            y\n            width\n            height\n            zIndex\n          }\n          config\n          dataSource {\n            type\n            url\n            data\n            refreshInterval\n          }\n        }\n        status\n        isDefault\n        createdBy\n        createdAt\n        updatedAt\n      }\n    }\n    totalCount\n  }\n}\n\nquery DefaultScreen {\n  defaultScreen {\n    id\n    name\n    description\n    layout {\n      width\n      height\n      background\n      cols\n      rows\n      grid {\n        size\n        enabled\n      }\n    }\n    components {\n      id\n      type\n      position {\n        x\n        y\n        width\n        height\n        zIndex\n      }\n      config\n      dataSource {\n        type\n        url\n        data\n        refreshInterval\n      }\n    }\n    status\n    isDefault\n    createdBy\n    createdAt\n    updatedAt\n  }\n}\n\nquery Screen($id: ID!) {\n  screen(id: $id) {\n    id\n    name\n    description\n    layout {\n      width\n      height\n      background\n      cols\n      rows\n      grid {\n        size\n        enabled\n      }\n    }\n    components {\n      id\n      type\n      position {\n        x\n        y\n        width\n        height\n        zIndex\n      }\n      config\n      dataSource {\n        type\n        url\n        data\n        refreshInterval\n      }\n    }\n    status\n    isDefault\n    createdBy\n    createdAt\n    updatedAt\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query User($id: String!) {\n  user(id: $id) {\n    id\n    username\n    email\n    status\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateUser($id: String!, $input: UpdateUserDto!) {\n  updateUser(id: $id, input: $input) {\n    id\n    username\n    email\n    status\n    createdAt\n    updatedAt\n  }\n}"): (typeof documents)["query User($id: String!) {\n  user(id: $id) {\n    id\n    username\n    email\n    status\n    createdAt\n    updatedAt\n  }\n}\n\nmutation UpdateUser($id: String!, $input: UpdateUserDto!) {\n  updateUser(id: $id, input: $input) {\n    id\n    username\n    email\n    status\n    createdAt\n    updatedAt\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query WeiboAccountStats {\n  weiboAccountStats {\n    total\n    todayNew\n    online\n  }\n}"): (typeof documents)["query WeiboAccountStats {\n  weiboAccountStats {\n    total\n    todayNew\n    online\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Login($input: LoginDto!) {\n    login(input: $input) {\n      accessToken\n      refreshToken\n      user {\n        id\n        username\n        email\n        status\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Login($input: LoginDto!) {\n    login(input: $input) {\n      accessToken\n      refreshToken\n      user {\n        id\n        username\n        email\n        status\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Register($input: RegisterDto!) {\n    register(input: $input) {\n      accessToken\n      refreshToken\n      user {\n        id\n        username\n        email\n        status\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Register($input: RegisterDto!) {\n    register(input: $input) {\n      accessToken\n      refreshToken\n      user {\n        id\n        username\n        email\n        status\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Refresh($input: RefreshTokenDto!) {\n    refreshToken(input: $input) {\n      accessToken\n      refreshToken\n      user {\n        id\n        username\n        email\n        status\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Refresh($input: RefreshTokenDto!) {\n    refreshToken(input: $input) {\n      accessToken\n      refreshToken\n      user {\n        id\n        username\n        email\n        status\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Logout {\n    logout\n  }\n"): (typeof documents)["\n  mutation Logout {\n    logout\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Me {\n    me {\n      id\n      username\n      email\n      status\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query Me {\n    me {\n      id\n      username\n      email\n      status\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query EventsForMap($filter: EventMapQueryInput) {\n    eventsForMap(filter: $filter) {\n      id\n      eventName\n      summary\n      occurTime\n      province\n      city\n      district\n      street\n      longitude\n      latitude\n      status\n      eventTypeId\n      industryTypeId\n    }\n  }\n"): (typeof documents)["\n  query EventsForMap($filter: EventMapQueryInput) {\n    eventsForMap(filter: $filter) {\n      id\n      eventName\n      summary\n      occurTime\n      province\n      city\n      district\n      street\n      longitude\n      latitude\n      status\n      eventTypeId\n      industryTypeId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Events($filter: EventQueryInput) {\n    events(filter: $filter) {\n      edges {\n        node {\n          id\n          eventName\n          summary\n          occurTime\n          province\n          city\n          district\n          street\n          status\n          eventTypeId\n          industryTypeId\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Events($filter: EventQueryInput) {\n    events(filter: $filter) {\n      edges {\n        node {\n          id\n          eventName\n          summary\n          occurTime\n          province\n          city\n          district\n          street\n          status\n          eventTypeId\n          industryTypeId\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AmapKey {\n    configValue(type: AMAP_API_KEY) {\n      value\n    }\n  }\n"): (typeof documents)["\n  query AmapKey {\n    configValue(type: AMAP_API_KEY) {\n      value\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query User($id: String!) {\n    user(id: $id) {\n      id\n      username\n      email\n      status\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query User($id: String!) {\n    user(id: $id) {\n      id\n      username\n      email\n      status\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateUser($id: String!, $input: UpdateUserDto!) {\n    updateUser(id: $id, input: $input) {\n      id\n      username\n      email\n      status\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUser($id: String!, $input: UpdateUserDto!) {\n    updateUser(id: $id, input: $input) {\n      id\n      username\n      email\n      status\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query WeiboAccountStats {\n    weiboAccountStats {\n      total\n      todayNew\n      online\n    }\n  }\n"): (typeof documents)["\n  query WeiboAccountStats {\n    weiboAccountStats {\n      total\n      todayNew\n      online\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;