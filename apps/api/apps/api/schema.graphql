# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AggregateTaskInput {
  """窗口结束时间 (ISO 8601 格式)"""
  endTime: String!

  """可选：是否强制重新计算 (默认 false)"""
  forceRecalculate: Boolean

  """可选：过滤关键词"""
  keyword: String

  """需要计算的聚合指标列表"""
  metrics: [String!]!

  """窗口开始时间 (ISO 8601 格式)"""
  startTime: String!

  """可选：Top N 数量 (默认 10)"""
  topN: Int

  """时间窗口类型 (hour/day/week/month)"""
  windowType: String!
}

input AnalyzeTaskInput {
  """需要执行的分析类型列表"""
  analysisTypes: [String!]!

  """待分析数据的 ID"""
  dataId: String!

  """数据类型 (post/comment/user)"""
  dataType: String!

  """可选：关键词（微博搜索场景）"""
  keyword: String

  """可选：关联任务ID"""
  taskId: String
}

type ApiKeyConnection {
  edges: [ApiKeyEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ApiKeyEdge {
  cursor: String!
  node: ApiKeyResponseDto!
}

input ApiKeyQueryDto {
  endDate: DateTime
  includeExpired: Boolean = false
  limit: Int = 10
  page: Int = 1
  search: String
  sortBy: ApiKeySortBy = CREATED_AT
  sortOrder: ApiKeySortOrder = DESC
  startDate: DateTime
  status: ApiKeyStatus
}

type ApiKeyResponseDto {
  createdAt: DateTime!
  createdIp: String
  description: String
  expiresAt: DateTime
  id: Int!
  isActive: Boolean!
  isExpired: Boolean!
  isValid: Boolean!
  key: String!
  lastUsedAt: DateTime
  name: String!
  permissions: [String!]
  type: ApiKeyType!
  updatedAt: DateTime!
  usageCount: Int!
}

"""API Key 排序字段"""
enum ApiKeySortBy {
  CREATED_AT
  LAST_USED_AT
  NAME
  UPDATED_AT
  USAGE_COUNT
}

"""排序方向"""
enum ApiKeySortOrder {
  ASC
  DESC
}

type ApiKeyStatsDto {
  averageDailyUsage: Float!
  createdAt: DateTime!
  daysSinceCreation: Int!
  id: Int!
  lastUsedAt: DateTime
  name: String!
  usageCount: Int!
}

"""API Key 状态过滤枚举"""
enum ApiKeyStatus {
  ACTIVE
  ALL
  EXPIRED
  INACTIVE
}

type ApiKeySummaryStatsDto {
  active: Int!
  averageDailyUsage: Float!
  expired: Int!
  expiringSoon: Int!
  inactive: Int!
  mostUsed: ApiKeyStatsDto
  neverUsed: Int!
  recentlyUsed: ApiKeyStatsDto
  total: Int!
  totalUsage: Int!
}

"""API Key 类型"""
enum ApiKeyType {
  ADMIN
  READ_ONLY
  READ_WRITE
}

input AssignBugInput {
  assigneeId: String!
}

type AttachmentUploadCredential {
  bucketName: String!
  expiresAt: DateTime!
  objectKey: String!
  requiresUpload: Boolean!
  token: String!
  uploadUrl: String
}

type AuthPayload {
  accessToken: String!
  refreshToken: String!
  user: User!
}

input BatchHourlyStatsRecordDto {
  records: [HourlyStatsRecordDto!]!
}

type BugAttachmentModel {
  filename: String!
  id: ID!
  mimeType: String!
  originalName: String!
  size: Float!
  uploadedAt: DateTime!
  uploadedBy: String!
  url: String!
}

type BugCategoryStatistics {
  configuration: Int!
  data: Int!
  documentation: Int!
  functional: Int!
  integration: Int!
  performance: Int!
  security: Int!
  ui_ux: Int!
}

type BugCommentModel {
  authorId: String
  authorName: String!
  bugId: String!
  content: String!
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

input BugFiltersInput {
  assigneeId: String
  limit: Float
  page: Float
  priority: [BugPriority!]
  reporterId: String
  search: String
  sortBy: String
  sortOrder: String
  status: [BugStatus!]
}

type BugModel {
  actualBehavior: String
  actualHours: Float
  assigneeId: String
  attachments: [BugAttachmentModel!]
  category: String
  closedAt: DateTime
  closedBy: String
  comments: [BugCommentModel!]
  createdAt: DateTime!
  description: String
  dueDate: DateTime
  environment: JSON
  estimatedHours: Float
  expectedBehavior: String
  id: ID!
  priority: BugPriority!
  reporterId: String!
  reproductionRate: String
  resolvedAt: DateTime
  resolvedBy: String
  status: BugStatus!
  stepsToReproduce: String
  title: String!
  updatedAt: DateTime!
}

enum BugPriority {
  CRITICAL
  HIGH
  LOW
  MEDIUM
}

type BugPriorityStatistics {
  critical: Int!
  high: Int!
  low: Int!
  medium: Int!
}

type BugStatisticsModel {
  byCategory: BugCategoryStatistics!
  byPriority: BugPriorityStatistics!
  byStatus: BugStatusStatistics!
  total: Int!
}

enum BugStatus {
  CLOSED
  IN_PROGRESS
  OPEN
  REJECTED
  REOPENED
  RESOLVED
}

type BugStatusStatistics {
  closed: Int!
  in_progress: Int!
  open: Int!
  rejected: Int!
  reopened: Int!
  resolved: Int!
}

type BugsPaginationModel {
  bugs: [BugModel!]!
  total: Int!
}

input CleanTaskInput {
  """任务优先级"""
  priority: String! = "normal"

  """MongoDB 原始数据文档 ID"""
  rawDataId: String!

  """数据源类型"""
  sourceType: String!
}

type ConfigCacheStats {
  keys: [String!]!
  size: Int!
}

"""配置项类型标识"""
enum ConfigType {
  AMAP_API_KEY
}

type ConfigValue {
  expiresAt: DateTime
  value: String!
}

input ConfirmAttachmentUploadInput {
  token: String!
}

type ConsumerStats {
  """平均处理时间（毫秒）"""
  avgProcessingTime: Float!

  """失败处理数"""
  failureCount: Int!

  """最后处理时间"""
  lastProcessedAt: DateTime

  """重试处理数"""
  retryCount: Int!

  """成功处理数"""
  successCount: Int!

  """总处理消息数"""
  totalMessages: Int!
}

input CreateApiKeyDto {
  description: String
  expiresAt: String
  name: String!
  permissions: [String!]
  type: ApiKeyType!
}

input CreateBugCommentInput {
  authorId: String
  content: String!
}

input CreateBugInput {
  actualBehavior: String
  assigneeId: String
  category: String
  description: String
  dueDate: DateTime
  estimatedHours: Float
  expectedBehavior: String
  priority: BugPriority
  reporterId: String!
  reproductionRate: String
  stepsToReproduce: String
  title: String!
}

input CreateEventInput {
  city: String!
  district: String
  eventName: String!
  eventTypeId: ID!
  industryTypeId: ID!
  latitude: Float
  locationText: String
  longitude: Float
  occurTime: String!
  province: String!
  status: EventStatus
  street: String
  summary: String
  tagIds: [ID!]
}

input CreateEventTypeInput {
  description: String
  eventCode: String!
  eventName: String!
  sortOrder: Int
  status: Int
}

input CreateIndustryTypeInput {
  description: String
  industryCode: String!
  industryName: String!
  sortOrder: Int
  status: Int
}

input CreateMediaTypeInput {
  description: String
  sort: Int
  status: MediaTypeStatus
  typeCode: String!
  typeName: String!
}

input CreateScreenInput {
  components: [ScreenComponentInput!]
  description: String
  layout: ScreenLayoutInput!
  name: String!
}

input CreateTagInput {
  tagColor: String
  tagName: String!
}

input CreateWeiboSearchTaskInput {
  crawlInterval: String
  keyword: String!
  startDate: String!
}

type DashboardActivity {
  entityId: String
  message: String!
  time: String!
  type: DashboardActivityType!
}

"""仪表盘最近动态类别"""
enum DashboardActivityType {
  Event
  Screen
  Task
  Weibo
}

type DashboardStats {
  totalEvents: Int!
  totalScreens: Int!
  totalSearchTasks: Int!
  totalWeiboAccounts: Int!
}

"""宽容且可靠的日期时间标量"""
scalar DateTime

input DeleteMessagesInput {
  """需删除的消息 ID 列表"""
  messageIds: [String!]!

  """目标死信队列名称"""
  queueName: String!
}

type DlqMessage {
  content: JSON
  errorMessage: String
  failedAt: DateTime!
  id: String!
  queueName: String!
  retryCount: Int!
}

type DlqMessageConnection {
  edges: [DlqMessageEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type DlqMessageEdge {
  cursor: String!
  node: DlqMessage!
}

input DlqQueryInput {
  """页码，起始为 1"""
  page: Int! = 1

  """每页条数，最大 100 条"""
  pageSize: Int! = 20

  """死信队列名称"""
  queueName: String!
}

type DlqQueueInfo {
  messageCount: Int!
  name: String!
  originalQueue: String!
}

type Event {
  attachments: [EventAttachment!]!
  city: String!
  createdAt: DateTime!
  createdBy: String
  district: String
  eventName: String!
  eventType: EventType
  eventTypeId: ID!
  id: ID!
  industryType: IndustryType
  industryTypeId: ID!
  latitude: Float
  locationText: String
  longitude: Float
  occurTime: DateTime!
  province: String!
  status: EventStatus!
  street: String
  summary: String
  tags: [Tag!]!
  updatedAt: DateTime!
}

type EventAttachment {
  bucketName: String!
  createdAt: DateTime!
  eventId: ID!
  fileMd5: String
  fileName: String!
  fileSize: Int
  fileType: EventAttachmentFileType!
  fileUrl: String!
  id: ID!
  mimeType: String
  objectName: String!
  sortOrder: Int!
}

"""事件附件文件类型"""
enum EventAttachmentFileType {
  DOCUMENT
  IMAGE
  VIDEO
}

type EventConnection {
  edges: [EventEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type EventEdge {
  cursor: String!
  node: Event!
}

type EventMapPoint {
  city: String!
  district: String
  eventName: String!
  eventTypeId: ID!
  id: ID!
  industryTypeId: ID!
  latitude: Float!
  longitude: Float!
  occurTime: DateTime!
  province: String!
  status: EventStatus!
  street: String
  summary: String
}

input EventMapQueryInput {
  city: String
  district: String
  endTime: String
  eventTypeId: ID
  industryTypeId: ID
  keyword: String
  province: String
  startTime: String
  status: EventStatus
  tagIds: [ID!]
}

input EventQueryInput {
  city: String
  district: String
  endTime: String
  eventTypeId: ID
  industryTypeId: ID
  keyword: String
  page: Int = 1
  pageSize: Int = 20
  province: String
  startTime: String
  status: EventStatus
  tagIds: [ID!]
}

"""事件状态枚举"""
enum EventStatus {
  ARCHIVED
  DRAFT
  PUBLISHED
}

type EventType {
  createdAt: DateTime!
  description: String
  eventCode: String!
  eventName: String!
  id: ID!
  sortOrder: Int!
  status: Int!
  updatedAt: DateTime!
}

type HealthStatus {
  status: String!
  timestamp: DateTime!
}

type HourlyStatsPeak {
  """峰值数量"""
  count: Int!

  """峰值时间"""
  hour: String!
}

type HourlyStatsPoint {
  """统计数量"""
  count: Int!

  """时间点 (ISO 8601格式)"""
  hour: String!

  """占比 (可选)"""
  percentage: Float

  """趋势 (可选)"""
  trend: String
}

input HourlyStatsQueryDto {
  endDate: DateTime!
  interval: String
  startDate: DateTime!
  timezone: String
  type: HourlyStatsType!
}

input HourlyStatsRecordDto {
  count: Int!
  metadata: JSON
  timestamp: DateTime!
  type: HourlyStatsType!
}

type HourlyStatsResponse {
  """统计数据点"""
  data: [HourlyStatsPoint!]!

  """汇总信息"""
  summary: HourlyStatsSummary!

  """时间范围"""
  timeRange: HourlyStatsTimeRange!
}

type HourlyStatsSummary {
  """平均值"""
  average: Float!

  """增长率 (可选)"""
  growth: Float

  """峰值"""
  peak: HourlyStatsPeak!

  """总数"""
  total: Int!
}

type HourlyStatsTimeRange {
  """结束时间"""
  end: String!

  """开始时间"""
  start: String!

  """时区"""
  timezone: String!
}

"""小时统计类型"""
enum HourlyStatsType {
  """消息处理统计"""
  MESSAGE_PROCESSING

  """性能统计"""
  PERFORMANCE

  """任务执行统计"""
  TASK_EXECUTION

  """用户活跃度"""
  USER_ACTIVITY
}

type IndustryType {
  createdAt: DateTime!
  description: String
  id: ID!
  industryCode: String!
  industryName: String!
  sortOrder: Int!
  status: Int!
  updatedAt: DateTime!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type JdAccount {
  createdAt: DateTime!
  id: Int!
  jdAvatar: String
  jdNickname: String
  jdUid: String!
  lastCheckAt: DateTime
  status: JdAccountStatus!
}

type JdAccountCheckResult {
  accountId: Int!
  checkedAt: DateTime!
  jdUid: String!
  message: String!
  newStatus: JdAccountStatus!
  oldStatus: JdAccountStatus!
  statusChanged: Boolean!
}

type JdAccountCheckSummary {
  checked: Int!
  results: [JdAccountCheckResult!]!
  total: Int!
}

type JdAccountConnection {
  edges: [JdAccountEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type JdAccountEdge {
  cursor: String!
  node: JdAccount!
}

input JdAccountFilterInput {
  page: Int = 1
  pageSize: Int = 10
}

type JdAccountStats {
  online: Int!
  todayNew: Int!
  total: Int!
}

"""京东账号当前状态"""
enum JdAccountStatus {
  ACTIVE
  BANNED
  EXPIRED
  RESTRICTED
}

type JdLoginEvent {
  data: JSONObject
  type: JdLoginEventType!
}

"""京东扫码登录事件类型"""
enum JdLoginEventType {
  Error
  Expired
  Qrcode
  Scanned
  Status
  Success
}

type JdLoginSession {
  expired: Boolean!
  expiresAt: DateTime!
  lastEvent: JdLoginEvent
  sessionId: String!
}

input LoginDto {
  password: String!
  usernameOrEmail: String!
}

type MediaType {
  createdAt: DateTime!
  description: String
  id: ID!
  sort: Int!
  status: MediaTypeStatus!
  typeCode: String!
  typeName: String!
  updatedAt: DateTime!
}

type MediaTypeConnection {
  edges: [MediaTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type MediaTypeEdge {
  cursor: String!
  node: MediaType!
}

input MediaTypeFilterInput {
  keyword: String
  page: Int = 1
  pageSize: Int = 10
  status: MediaTypeStatus
}

"""媒体类型状态"""
enum MediaTypeStatus {
  ACTIVE
  INACTIVE
}

type MultiTypeHourlyStats {
  """消息处理统计"""
  message_processing: HourlyStatsResponse

  """性能统计"""
  performance: HourlyStatsResponse

  """任务执行统计"""
  task_execution: HourlyStatsResponse

  """用户活跃度"""
  user_activity: HourlyStatsResponse
}

input MultiTypeStatsQueryDto {
  endDate: DateTime!
  startDate: DateTime!
  timezone: String
  types: [HourlyStatsType!]!
}

type Mutation {
  addBugComment(bugId: ID!, input: CreateBugCommentInput!): BugCommentModel!
  addTagsToEvent(eventId: ID!, tagIds: [ID!]!): Event!
  archiveEvent(id: ID!): Event!
  assignBug(id: ID!, input: AssignBugInput!): BugModel!
  checkAllJdAccounts: JdAccountCheckSummary!
  checkAllWeiboAccounts: Boolean!
  checkJdAccount(id: Int!): JdAccountCheckResult!
  checkWeiboAccount(id: Int!): Boolean!
  cleanupExpiredSessions: String!
  cleanupExpiredStats: Int!
  clearConfigCache(type: ConfigType): Boolean!
  confirmEventAttachmentUpload(input: ConfirmAttachmentUploadInput!): EventAttachment!
  copyScreen(id: ID!): Screen!
  createApiKey(input: CreateApiKeyDto!): ApiKeyResponseDto!
  createBug(input: CreateBugInput!): BugModel!
  createEvent(input: CreateEventInput!): Event!
  createEventType(input: CreateEventTypeInput!): EventType!
  createIndustryType(input: CreateIndustryTypeInput!): IndustryType!
  createMediaType(input: CreateMediaTypeInput!): MediaType!
  createScreen(input: CreateScreenInput!): Screen!
  createTag(input: CreateTagInput!): Tag!
  createWeiboSearchTask(input: CreateWeiboSearchTaskInput!): WeiboSearchTask!

  """删除死信队列中的消息"""
  deleteDlqMessages(input: DeleteMessagesInput!): Boolean!
  disableApiKey(id: Int!): Boolean!
  dispatchNotification(input: NotificationInput!): Notification!
  draftScreen(id: ID!): Screen!
  enableApiKey(id: Int!): Boolean!
  login(input: LoginDto!): AuthPayload!
  logout: Boolean!
  markWeiboAccountBanned(id: Int!, token: String!): Boolean!
  pauseAllWeiboSearchTasks: Int!
  pauseWeiboSearchTask(id: Int!, input: PauseWeiboTaskInput): WeiboSearchTask!
  publishEvent(id: ID!): Event!
  publishScreen(id: ID!): Screen!
  recordBatchHourlyStats(input: BatchHourlyStatsRecordDto!): Boolean!
  refreshToken(input: RefreshTokenDto!): AuthPayload!
  regenerateApiKey(id: Int!): RegenerateApiKeyDto!
  register(input: RegisterDto!): AuthPayload!
  removeApiKey(id: Int!): Boolean!
  removeBug(id: ID!): Boolean!
  removeEvent(id: ID!): Boolean!
  removeEventType(id: ID!): Boolean!
  removeIndustryType(id: ID!): Boolean!
  removeJdAccount(id: Int!): Boolean!
  removeMediaType(id: Int!): Boolean!
  removeScreen(id: ID!): Boolean!
  removeTag(id: ID!): Boolean!
  removeTagFromEvent(eventId: ID!, tagId: ID!): Boolean!
  removeUser(id: String!): Boolean!
  removeWeiboAccount(id: Int!): Boolean!
  removeWeiboSearchTask(id: Int!): Boolean!
  requestEventAttachmentUpload(input: RequestAttachmentUploadInput!): AttachmentUploadCredential!
  resetWeiboTaskStatusConsumerStats: Boolean!
  resumeAllWeiboSearchTasks: Int!
  resumeWeiboSearchTask(id: Int!, input: ResumeWeiboTaskInput): WeiboSearchTask!

  """将死信消息重新投递到原队列"""
  retryDlqMessages(input: RetryMessagesInput!): Boolean!
  runWeiboSearchTaskNow(id: Int!, input: RunWeiboTaskNowInput): WeiboSearchTask!
  setDefaultScreen(id: ID!): Screen!
  startJdLogin: JdLoginSession!
  startWeiboLogin: WeiboLoginSession!

  """手动触发数据聚合任务"""
  triggerAggregateTask(input: AggregateTaskInput!): TaskResult!

  """手动触发数据分析任务"""
  triggerAnalyzeTask(input: AnalyzeTaskInput!): TaskResult!

  """手动触发数据清洗任务"""
  triggerCleanTask(input: CleanTaskInput!): TaskResult!
  updateApiKey(id: Int!, input: UpdateApiKeyDto!): ApiKeyResponseDto!
  updateBug(id: ID!, input: UpdateBugInput!): BugModel!
  updateBugStatus(id: ID!, input: UpdateBugStatusInput!): BugModel!
  updateEvent(id: ID!, input: UpdateEventInput!): Event!
  updateEventType(id: ID!, input: UpdateEventTypeInput!): EventType!
  updateIndustryType(id: ID!, input: UpdateIndustryTypeInput!): IndustryType!
  updateMediaType(id: Int!, input: UpdateMediaTypeInput!): MediaType!
  updateScreen(id: ID!, input: UpdateScreenInput!): Screen!
  updateTag(id: ID!, input: UpdateTagInput!): Tag!
  updateUser(id: String!, input: UpdateUserDto!): User!
  updateWeiboSearchTask(id: Int!, input: UpdateWeiboSearchTaskInput!): WeiboSearchTask!
}

type Notification {
  id: ID!
  message: String!
  timestamp: DateTime!
  title: String!
  userId: ID
}

input NotificationInput {
  id: ID
  message: String!
  timestamp: DateTime
  title: String!
  userId: ID
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type PaginatedRawData {
  """是否有下一页"""
  hasNext: Boolean!

  """是否有上一页"""
  hasPrevious: Boolean!

  """数据列表"""
  items: [RawDataItem!]!

  """当前页码"""
  page: Int!

  """每页数量"""
  pageSize: Int!

  """总数量"""
  total: Int!

  """总页数"""
  totalPages: Int!
}

input PauseWeiboTaskInput {
  reason: String
}

"""原始数据处理状态"""
enum ProcessingStatus {
  COMPLETED
  FAILED
  PENDING
  PROCESSING
}

type Query {
  apiKey(id: Int!): ApiKeyResponseDto!
  apiKeyStats(id: Int!): ApiKeyStatsDto!
  apiKeySummary: ApiKeySummaryStatsDto!
  apiKeys(filter: ApiKeyQueryDto): ApiKeyConnection!
  bug(id: ID!): BugModel!
  bugComments(bugId: ID!): [BugCommentModel!]!
  bugStatistics: BugStatisticsModel!
  bugs(filters: BugFiltersInput): BugsPaginationModel!
  configCacheStats: ConfigCacheStats!
  configValue(type: ConfigType!): ConfigValue!
  dashboardRecentActivities: [DashboardActivity!]!
  dashboardStats: DashboardStats!
  defaultScreen: Screen!

  """分页查询死信队列中的消息"""
  dlqMessages(filter: DlqQueryInput): DlqMessageConnection!

  """获取所有死信队列信息"""
  dlqQueues: [DlqQueueInfo!]!
  event(id: ID!): Event!
  eventType(id: ID!): EventType!
  eventTypes: [EventType!]!
  events(filter: EventQueryInput): EventConnection!
  eventsByTag(tagId: ID!): [Event!]!
  eventsForMap(filter: EventMapQueryInput): [EventMapPoint!]!
  eventsNearby(latitude: Float!, longitude: Float!, radius: Float!): [Event!]!
  health: HealthStatus!
  industryType(id: ID!): IndustryType!
  industryTypes: [IndustryType!]!
  jdAccountStats: JdAccountStats!
  jdAccounts(filter: JdAccountFilterInput): JdAccountConnection!
  jdLoginSession(sessionId: String!): JdLoginSession!
  me: User!
  mediaType(id: Int!): MediaType!
  mediaTypes(filter: MediaTypeFilterInput): MediaTypeConnection!
  popularTags(limit: Int): [Tag!]!
  publishedScreens(limit: Int, page: Int): ScreenConnection!

  """根据ID获取单个原始数据"""
  rawDataById(
    """数据ID"""
    id: String!
  ): RawDataItem

  """根据数据源类型查询原始数据"""
  rawDataBySourceType(
    page: Int = 1
    pageSize: Int = 20

    """数据源类型"""
    sourceType: SourceType!
  ): PaginatedRawData!

  """获取原始数据列表，支持分页和过滤"""
  rawDataList(filter: RawDataFilterInput): PaginatedRawData!

  """获取原始数据的统计信息"""
  rawDataStatistics: RawDataStatistics!

  """获取原始数据的趋势分析数据"""
  rawDataTrend(input: TrendDataInput): [TrendDataPoint!]!

  """获取最近的原始数据"""
  recentRawData(limit: Int = 10, sourceType: SourceType): [RawDataItem!]!
  screen(id: ID!): Screen!
  screens(limit: Int, page: Int): ScreenConnection!

  """搜索原始数据"""
  searchRawData(
    """搜索关键词"""
    keyword: String!
    page: Int = 1
    pageSize: Int = 20
  ): PaginatedRawData!
  tag(id: ID!): Tag!
  tags(keyword: String, page: Int, pageSize: Int): TagConnection!
  user(id: String!): User!
  users: [User!]!
  webSocketHealth: String!
  webSocketStats: WebSocketStats!
  weiboAccount(id: Int!): WeiboAccount!
  weiboAccountStats: WeiboAccountStats!
  weiboAccounts(filter: WeiboAccountFilterInput): WeiboAccountConnection!
  weiboAccountsWithCookies(token: String!): [WeiboAccountWithCookies!]!
  weiboAggregatedStats(query: StatsAggregationQueryDto!): HourlyStatsResponse!
  weiboHourlyStats(query: HourlyStatsQueryDto!): HourlyStatsResponse!
  weiboLoginSession(sessionId: String!): WeiboLoginSession!
  weiboMultiTypeHourlyStats(query: MultiTypeStatsQueryDto!): MultiTypeHourlyStats!
  weiboSearchTask(id: Int!): WeiboSearchTask!
  weiboSearchTaskStats: WeiboSearchTaskStats!
  weiboSearchTasks(filter: WeiboSearchTaskFilterInput): WeiboSearchTaskConnection!
  weiboSessionStats: WeiboSessionStats!
  weiboSubTask(id: Int!): WeiboSubTask!
  weiboSubTasks(filter: WeiboSubTaskFilterInput, taskId: Int!): WeiboSubTaskConnection!
  weiboTaskStatusConsumerStats: ConsumerStats!
}

input RawDataFilterInput {
  """关键词搜索"""
  keyword: String

  """页码"""
  page: Int = 1

  """每页数量"""
  pageSize: Int = 20

  """数据源平台"""
  sourcePlatform: SourcePlatform

  """数据源类型"""
  sourceType: SourceType

  """处理状态"""
  status: ProcessingStatus

  """时间范围"""
  timeRange: TimeRangeInput
}

type RawDataItem {
  """数据ID"""
  _id: ID!

  """内容哈希"""
  contentHash: String!

  """内容摘要"""
  contentPreview: String!

  """创建时间"""
  createdAt: String!

  """错误信息"""
  errorMessage: String

  """元数据"""
  metadata: String!

  """处理时间"""
  processedAt: String

  """数据源类型"""
  sourceType: SourceType!

  """源链接"""
  sourceUrl: String!

  """处理状态"""
  status: ProcessingStatus!
}

type RawDataStatistics {
  """已完成数据量"""
  completed: Int!

  """失败数据量"""
  failed: Int!

  """待处理数据量"""
  pending: Int!

  """处理中数据量"""
  processing: Int!

  """成功率"""
  successRate: Float!

  """总数据量"""
  total: Int!
}

input RefreshTokenDto {
  refreshToken: String!
}

type RegenerateApiKeyDto {
  key: String!
  warning: String!
}

input RegisterDto {
  email: String!
  password: String!
  username: String!
}

input RequestAttachmentUploadInput {
  eventId: ID!
  fileMd5: String!
  fileName: String!
  fileSize: Float!
  mimeType: String!
}

input ResumeWeiboTaskInput {
  reason: String
}

input RetryMessagesInput {
  """需重试的消息 ID 列表"""
  messageIds: [String!]!

  """目标死信队列名称"""
  queueName: String!
}

input RunWeiboTaskNowInput {
  reason: String
}

type Screen {
  components: [ScreenComponent!]!
  createdAt: DateTime!
  createdBy: String!
  creator: User
  description: String
  id: ID!
  isDefault: Boolean!
  layout: ScreenLayout!
  name: String!
  status: ScreenStatus!
  updatedAt: DateTime!
}

type ScreenComponent {
  config: JSONObject
  dataSource: ScreenComponentDataSource
  id: ID!
  position: ScreenComponentPosition!
  type: String!
}

type ScreenComponentDataSource {
  data: JSONObject
  refreshInterval: Int
  type: ScreenComponentDataSourceType!
  url: String
}

input ScreenComponentDataSourceInput {
  data: JSONObject

  """刷新频率，单位毫秒"""
  refreshInterval: Int
  type: ScreenComponentDataSourceType!
  url: String
}

"""屏幕组件数据源类型"""
enum ScreenComponentDataSourceType {
  API
  STATIC
}

input ScreenComponentInput {
  config: JSONObject
  dataSource: ScreenComponentDataSourceInput
  id: String!
  position: ScreenComponentPositionInput!
  type: String!
}

type ScreenComponentPosition {
  height: Int!
  width: Int!
  x: Int!
  y: Int!
  zIndex: Int!
}

input ScreenComponentPositionInput {
  height: Int!
  width: Int!
  x: Int!
  y: Int!
  zIndex: Int!
}

type ScreenConnection {
  edges: [ScreenEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ScreenEdge {
  cursor: String!
  node: Screen!
}

type ScreenGrid {
  enabled: Boolean!
  size: Int
}

input ScreenGridInput {
  enabled: Boolean

  """网格尺寸，单位为像素"""
  size: Int
}

type ScreenLayout {
  background: String!

  """向后兼容的列数信息"""
  cols: Int
  grid: ScreenGrid
  height: Int!

  """向后兼容的行数信息"""
  rows: Int
  width: Int!
}

input ScreenLayoutInput {
  background: String
  cols: Int @deprecated(reason: "请使用 width + grid.size 表达列数")
  grid: ScreenGridInput

  """画布高度，单位像素"""
  height: Int
  rows: Int @deprecated(reason: "请使用 height + grid.size 表达行数")

  """画布宽度，单位像素"""
  width: Int
}

"""大屏状态"""
enum ScreenStatus {
  Draft
  Published
}

"""数据源平台"""
enum SourcePlatform {
  CUSTOM
  JD
  WEIBO
}

"""数据源类型"""
enum SourceType {
  CUSTOM
  JD
  WEIBO_API_JSON
  WEIBO_COMMENT
  WEIBO_COMMENTS
  WEIBO_CREATOR_PROFILE
  WEIBO_HTML
  WEIBO_KEYWORD_SEARCH
  WEIBO_NOTE_DETAIL
}

input StatsAggregationQueryDto {
  endDate: DateTime!
  interval: String!
  startDate: DateTime!
  timezone: String
  type: HourlyStatsType!
}

type Subscription {
  jdLoginEvents(sessionId: String!): JdLoginEvent!
  notificationReceived: Notification!
  weiboLoggedInUsersUpdate: WeiboLoggedInUsersStats!
  weiboLoginEvents(sessionId: String!): WeiboLoginEvent!
}

type Tag {
  createdAt: DateTime!
  id: ID!
  tagColor: String!
  tagName: String!
  updatedAt: DateTime!
  usageCount: Int!
}

type TagConnection {
  edges: [TagEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type TagEdge {
  cursor: String!
  node: Tag!
}

type TaskResult {
  """结果消息"""
  message: String!

  """任务是否成功发布到队列"""
  success: Boolean!

  """任务ID或相关标识"""
  taskId: String
}

input TimeRangeInput {
  """结束时间"""
  endDate: String

  """开始时间"""
  startDate: String
}

input TrendDataInput {
  """聚合粒度"""
  granularity: String = "day"

  """状态过滤"""
  status: ProcessingStatus

  """时间范围"""
  timeRange: TimeRangeInput
}

type TrendDataPoint {
  """数据量"""
  count: Int!

  """状态"""
  status: ProcessingStatus!

  """时间点"""
  timestamp: String!
}

input UpdateApiKeyDto {
  description: String
  expiresAt: String
  isActive: Boolean
  name: String
  permissions: [String!]
  type: ApiKeyType
}

input UpdateBugInput {
  actualBehavior: String
  actualHours: Float
  assigneeId: String
  category: String
  description: String
  dueDate: DateTime
  estimatedHours: Float
  expectedBehavior: String
  priority: BugPriority
  reproductionRate: String
  status: BugStatus
  stepsToReproduce: String
  title: String
}

input UpdateBugStatusInput {
  comment: String
  status: BugStatus!
}

input UpdateEventInput {
  city: String
  district: String
  eventName: String
  eventTypeId: ID
  industryTypeId: ID
  latitude: Float
  locationText: String
  longitude: Float
  occurTime: String
  province: String
  status: EventStatus
  street: String
  summary: String
  tagIds: [ID!]
}

input UpdateEventTypeInput {
  description: String
  eventCode: String
  eventName: String
  sortOrder: Int
  status: Int
}

input UpdateIndustryTypeInput {
  description: String
  industryCode: String
  industryName: String
  sortOrder: Int
  status: Int
}

input UpdateMediaTypeInput {
  description: String
  sort: Int
  status: MediaTypeStatus
  typeCode: String
  typeName: String
}

input UpdateScreenInput {
  components: [ScreenComponentInput!]
  description: String
  layout: ScreenLayoutInput
  name: String
}

input UpdateTagInput {
  tagColor: String
  tagName: String
}

input UpdateUserDto {
  email: String
  status: UserStatus
  username: String
}

input UpdateWeiboSearchTaskInput {
  crawlInterval: String
  enabled: Boolean
  keyword: String
  startDate: String
}

type User {
  createdAt: DateTime!
  email: String!
  id: ID!
  status: UserStatus!
  updatedAt: DateTime!
  username: String!
}

type UserConnectionStats {
  count: Int!
  userId: String!
}

type UserSessionStats {
  activeCount: Int!
  totalDuration: Float!
  userId: String!
}

"""用户状态枚举"""
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

type WebSocketStats {
  averageConnectionDuration: Float!
  connectionsByUser: [UserConnectionStats!]!
  totalConnections: Int!
}

type WeiboAccount {
  avatar: String
  createdAt: DateTime!
  hasCookies: Boolean!
  id: ID!
  lastCheckAt: DateTime
  nickname: String!
  status: String!
  uid: String!
  updatedAt: DateTime!
}

type WeiboAccountConnection {
  edges: [WeiboAccountEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type WeiboAccountEdge {
  cursor: String!
  node: WeiboAccount!
}

input WeiboAccountFilterInput {
  keyword: String
  page: Float = 1
  pageSize: Float = 10
}

type WeiboAccountStats {
  online: Int!
  todayNew: Int!
  total: Int!
}

type WeiboAccountWithCookies {
  cookies: String!
  id: Int!
  lastCheckAt: DateTime
  status: String!
  weiboNickname: String
  weiboUid: String!
}

type WeiboLoggedInUsersStats {
  online: Int!
  todayNew: Int!
  total: Int!
}

type WeiboLoginEvent {
  data: JSONObject
  type: WeiboLoginEventType!
}

"""微博扫码登录事件类型"""
enum WeiboLoginEventType {
  Error
  Expired
  Qrcode
  Scanned
  Status
  Success
}

type WeiboLoginSession {
  expired: Boolean!
  expiresAt: DateTime!
  lastEvent: WeiboLoginEvent
  sessionId: String!
}

type WeiboSearchTask {
  crawlInterval: String!
  createdAt: DateTime!
  enabled: Boolean!
  id: ID!
  keyword: String!
  latestCrawlTime: DateTime
  nextRunAt: DateTime
  startDate: DateTime!
  updatedAt: DateTime!
}

type WeiboSearchTaskConnection {
  edges: [WeiboSearchTaskEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type WeiboSearchTaskEdge {
  cursor: String!
  node: WeiboSearchTask!
}

input WeiboSearchTaskFilterInput {
  enabled: Boolean
  keyword: String
  limit: Int = 10
  page: Int = 1
  sortBy: String
  sortOrder: String = "DESC"
}

type WeiboSearchTaskStats {
  disabled: Int!
  enabled: Int!
  total: Int!
}

type WeiboSessionStats {
  activeSessions: Int!
  averageSessionDuration: Float!
  completedSessions: Int!
  expiredSessions: Int!
  memorySessions: Int!
  sessionsByUser: [UserSessionStats!]!
  totalSessions: Int!
  webSocketConnections: Int!
}

type WeiboSubTask {
  createdAt: DateTime!
  id: ID!
  metadata: JSONObject!
  status: String!
  taskId: Int!
  type: String!
  updatedAt: DateTime!
}

type WeiboSubTaskConnection {
  edges: [WeiboSubTaskEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type WeiboSubTaskEdge {
  cursor: String!
  node: WeiboSubTask!
}

input WeiboSubTaskFilterInput {
  createdAfter: String
  createdBefore: String
  limit: Int = 10
  page: Int = 1
  sortBy: String
  sortOrder: String = "DESC"
  status: String
  taskId: Int
  type: String
  updatedAfter: String
  updatedBefore: String
}