# ========================================
# Playwright 专用 Dockerfile
# 基于 Playwright 官方镜像，包含所有浏览器依赖
# ========================================
FROM mcr.microsoft.com/playwright:v1.56.0-jammy AS base

# 安装 Node.js 和 pnpm
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \
    apt-get install -y nodejs && \
    corepack enable && \
    corepack prepare pnpm@10.18.1 --activate

WORKDIR /app

# ========================================
# 开发阶段
# ========================================
FROM base AS development

# 复制 workspace 配置文件
COPY pnpm-workspace.yaml package.json pnpm-lock.yaml ./

# 复制所有 packages 的 package.json
COPY packages/types/package.json ./packages/types/
COPY packages/config/package.json ./packages/config/
COPY packages/utils/package.json ./packages/utils/
COPY packages/redis/package.json ./packages/redis/
COPY packages/mongodb/package.json ./packages/mongodb/
COPY packages/rabbitmq/package.json ./packages/rabbitmq/
COPY packages/minio/package.json ./packages/minio/
COPY packages/sdk/package.json ./packages/sdk/

# 复制 api 应用的 package.json
COPY apps/api/package.json ./apps/api/

# 安装依赖
RUN --mount=type=cache,id=pnpm,target=/root/.local/share/pnpm/store \
    pnpm install --no-frozen-lockfile

# 暴露端口
EXPOSE 3000

# 启动开发服务器
CMD ["pnpm", "--filter", "@pro/api", "start:dev"]

# ========================================
# 依赖安装阶段
# ========================================
FROM base AS deps

WORKDIR /app

# 复制 workspace 配置文件
COPY pnpm-workspace.yaml package.json pnpm-lock.yaml ./

# 复制所有 packages 的 package.json
COPY packages/types/package.json ./packages/types/
COPY packages/config/package.json ./packages/config/
COPY packages/utils/package.json ./packages/utils/
COPY packages/redis/package.json ./packages/redis/
COPY packages/mongodb/package.json ./packages/mongodb/
COPY packages/rabbitmq/package.json ./packages/rabbitmq/
COPY packages/minio/package.json ./packages/minio/
COPY packages/sdk/package.json ./packages/sdk/

# 复制 api 应用的 package.json
COPY apps/api/package.json ./apps/api/

# 安装生产依赖
RUN --mount=type=cache,id=pnpm,target=/root/.local/share/pnpm/store \
    pnpm install --prod --no-frozen-lockfile

# ========================================
# 生产阶段：只复制产物
# ========================================
FROM base AS production

# 安装 dumb-init
RUN apt-get update && \
    apt-get install -y --no-install-recommends dumb-init && \
    rm -rf /var/lib/apt/lists/*

# 创建非 root 用户
RUN groupadd -g 1001 nodejs && \
    useradd -m -u 1001 -g nodejs nestjs

WORKDIR /app

# 从 deps 阶段复制 node_modules（pnpm workspace 只有根 node_modules）
COPY --from=deps --chown=nestjs:nodejs /app/node_modules ./node_modules

# 复制 package.json（用于 node 查找模块）
COPY --chown=nestjs:nodejs pnpm-workspace.yaml package.json ./
COPY --chown=nestjs:nodejs packages/types/package.json ./packages/types/
COPY --chown=nestjs:nodejs packages/config/package.json ./packages/config/
COPY --chown=nestjs:nodejs packages/utils/package.json ./packages/utils/
COPY --chown=nestjs:nodejs packages/redis/package.json ./packages/redis/
COPY --chown=nestjs:nodejs packages/mongodb/package.json ./packages/mongodb/
COPY --chown=nestjs:nodejs packages/rabbitmq/package.json ./packages/rabbitmq/
COPY --chown=nestjs:nodejs packages/minio/package.json ./packages/minio/
COPY --chown=nestjs:nodejs packages/sdk/package.json ./packages/sdk/
COPY --chown=nestjs:nodejs apps/api/package.json ./apps/api/

# 复制构建好的代码（从宿主机的相对路径，因为 context 是项目根目录）
COPY --chown=nestjs:nodejs ./packages/types/dist ./packages/types/dist
COPY --chown=nestjs:nodejs ./packages/config/dist ./packages/config/dist
COPY --chown=nestjs:nodejs ./packages/utils/dist ./packages/utils/dist
COPY --chown=nestjs:nodejs ./packages/redis/dist ./packages/redis/dist
COPY --chown=nestjs:nodejs ./packages/mongodb/dist ./packages/mongodb/dist
COPY --chown=nestjs:nodejs ./packages/rabbitmq/dist ./packages/rabbitmq/dist
COPY --chown=nestjs:nodejs ./packages/minio/dist ./packages/minio/dist
COPY --chown=nestjs:nodejs ./packages/sdk/dist ./packages/sdk/dist
COPY --chown=nestjs:nodejs ./apps/api/dist ./apps/api/dist

# 切换到非 root 用户
USER nestjs

# 暴露端口
EXPOSE 3000

# 设置环境变量
ENV NODE_ENV=production

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"

# 使用 dumb-init 启动应用
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "apps/api/dist/main.js"]
