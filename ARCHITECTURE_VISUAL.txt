┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃                    爬虫系统整体架构 - 微服务+DAG工作流                         ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

┌─────────────────────────────────────────────────────────────────────────────┐
│                           第一阶段：任务调度                                  │
├─────────────────────────────────────────────────────────────────────────────┤
│                                                                              │
│  ┌──────────────────────────────────────────────────────────────────────┐  │
│  │                    BROKER SERVICE (任务调度中心)                      │  │
│  ├──────────────────────────────────────────────────────────────────────┤  │
│  │                                                                      │  │
│  │  ┌─────────────────────────┐     ┌─────────────────────────┐       │  │
│  │  │ AggregateScheduler      │     │ SimpleIntervalScheduler │       │  │
│  │  │ ─────────────────────   │     │ ─────────────────────  │       │  │
│  │  │ @Cron('5 * * * *')      │     │ WeiboSearchTask        │       │  │
│  │  │ hourlyAggregation       │     │ → nextRunAt触发        │       │  │
│  │  │                         │     │ → WeiboSubTask创建     │       │  │
│  │  │ @Cron('10 0 * * *')     │     │                        │       │  │
│  │  │ dailyAggregation        │     └─────────────────────────┘       │  │
│  │  └─────────────────────────┘                                       │  │
│  │                                                                     │  │
│  │  ┌─────────────────────────┐     ┌─────────────────────────┐      │  │
│  │  │ WeiboAccountHealth      │     │ SimpleTaskMonitor       │      │  │
│  │  │ Scheduler               │     │ ─────────────────────  │      │  │
│  │  │ 账号健康监控             │     │ 任务进度监控            │      │  │
│  │  └─────────────────────────┘     └─────────────────────────┘      │  │
│  └──────────────────────────────────────────────────────────────────────┘  │
│                                                                              │
│  PostgreSQL: weibo_search_tasks, weibo_sub_tasks, weibo_accounts            │
│                                                                              │
└─────────────────────────────────────────────────────────────────────────────┘
                                      ↓
                            SubTaskMessage (RabbitMQ)
                         weibo_crawl_queue
                    ─────────────────────────────────→

┌─────────────────────────────────────────────────────────────────────────────┐
│                        第二阶段：数据采集 (爬虫执行)                          │
├─────────────────────────────────────────────────────────────────────────────┤
│                                                                              │
│  ┌──────────────────────────────────────────────────────────────────────┐  │
│  │                   CRAWLER SERVICE (数据采集)                          │  │
│  ├──────────────────────────────────────────────────────────────────────┤  │
│  │                                                                      │  │
│  │  CrawlQueueConsumer                                                │  │
│  │      ↓ (消费RabbitMQ消息)                                          │  │
│  │  CrawlerServiceV2                                                 │  │
│  │      ↓ (构建工作流DAG)                                            │  │
│  │  ┌─────────────────────────────────────────────────────────────┐ │  │
│  │  │         WorkflowFactory + WorkflowExecutor                 │ │  │
│  │  │         ────────────────────────────────────────────────   │ │  │
│  │  │  ┌──────────────────┐    ┌──────────────────┐            │ │  │
│  │  │  │URLBuilder AST    │→   │AccountInjector   │            │ │  │
│  │  │  │                  │    │AST               │            │ │  │
│  │  │  └──────────────────┘    └──────────────────┘            │ │  │
│  │  │         ↓                       ↓                         │ │  │
│  │  │  ┌──────────────────────────────────────┐               │ │  │
│  │  │  │   PlaywrightAst (浏览器自动化)       │               │ │  │
│  │  │  │   - cookies, userAgent注入           │               │ │  │
│  │  │  │   - 页面加载与DOM提取               │               │ │  │
│  │  │  └──────────────────────────────────────┘               │ │  │
│  │  │         ↓ (HTML提取)                                    │ │  │
│  │  │  ┌──────────────────────────────────────┐               │ │  │
│  │  │  │    StorageAst (数据存储)            │               │ │  │
│  │  │  │    - contentHash计算                │               │ │  │
│  │  │  │    - 写入MongoDB RawDataSource     │               │ │  │
│  │  │  └──────────────────────────────────────┘               │ │  │
│  │  │                                                         │ │  │
│  │  └─────────────────────────────────────────────────────────┘ │  │
│  │                                                              │  │
│  │  支持模块：                                                   │  │
│  │  - BrowserGuardianService (浏览器生命周期管理)              │  │
│  │  - WeiboAccountService (账号轮转)                           │  │
│  │                                                              │  │
│  └──────────────────────────────────────────────────────────────┘  │
│                                                                      │
│  MongoDB: raw_data_sources (原始数据, status=pending)               │
│                                                                      │
└─────────────────────────────────────────────────────────────────────────────┘
                                      ↓
                          RawDataReadyEvent (RabbitMQ)
                        raw_data_ready_queue
                   ─────────────────────────────────→

┌─────────────────────────────────────────────────────────────────────────────┐
│                     第三阶段：数据清洗 (规范化入库)                           │
├─────────────────────────────────────────────────────────────────────────────┤
│                                                                              │
│  ┌──────────────────────────────────────────────────────────────────────┐  │
│  │                  CLEANER SERVICE (数据清洗)                           │  │
│  ├──────────────────────────────────────────────────────────────────────┤  │
│  │                                                                      │  │
│  │  RawDataConsumer                                                   │  │
│  │      ↓ (消费RawDataReadyEvent)                                    │  │
│  │  RawDataService (查询MongoDB)                                     │  │
│  │      ↓                                                             │  │
│  │  CleanerService + CleanTaskFactory                               │  │
│  │      ↓ (根据sourceType选择清洗策略)                              │  │
│  │  ┌─────────────────────────────────────────────────────────────┐ │  │
│  │  │  WeiboPersistenceService                                   │ │  │
│  │  │  ─────────────────────────────────────────────────────   │ │  │
│  │  │  ├─ KeywordSearch清洗 → WeiboPost/Comment/User          │ │  │
│  │  │  ├─ Detail清洗       → WeiboPost详情                   │ │  │
│  │  │  ├─ Comments清洗     → WeiboComment                    │ │  │
│  │  │  └─ UserInfo清洗     → WeiboUser/Stats                 │ │  │
│  │  │                                                         │ │  │
│  │  │  操作：                                                │ │  │
│  │  │  - 字段规范化 (HTML→纯文本、时间格式等)              │ │  │
│  │  │  - 关系建立 (FK关联)                                 │ │  │
│  │  │  - 批量插入/更新 PostgreSQL                          │ │  │
│  │  │  - 更新 RawDataSource.status=processed              │ │  │
│  │  └─────────────────────────────────────────────────────────┘ │  │
│  │                                                              │  │
│  └──────────────────────────────────────────────────────────────┘  │
│                                                                      │
│  PostgreSQL:                                                         │
│  ├─ weibo_posts (文章表)                                            │
│  ├─ weibo_comments (评论表)                                         │
│  ├─ weibo_users (用户表)                                            │
│  ├─ weibo_hashtags (标签)                                           │
│  ├─ weibo_media (媒体)                                              │
│  └─ weibo_interactions (互动)                                       │
│                                                                      │
│  MongoDB: raw_data_sources (status=processed)                       │
│                                                                      │
└─────────────────────────────────────────────────────────────────────────────┘
                                      ↓
                          CleanedDataEvent (RabbitMQ)
                         cleaned_data_queue
                  ─────────────────────────────────→

┌─────────────────────────────────────────────────────────────────────────────┐
│                   第四阶段：数据分析 (缺失 ❌)                               │
├─────────────────────────────────────────────────────────────────────────────┤
│                                                                              │
│  [ANALYSIS SERVICE] ← CleanedDataEvent                                    │
│  - 情感分析                                                                 │
│  - 关键词提取                                                               │
│  - 热点检测                                                                 │
│  - NLP处理                                                                  │
│                      ↓ AnalysisResultEvent → analysis_result_queue        │
│                                                                              │
│  ⚠️  当前缺失实现                                                          │
│                                                                              │
└─────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│                   第五阶段：数据聚合 (缺失 ❌)                               │
├─────────────────────────────────────────────────────────────────────────────┤
│                                                                              │
│  Broker (定时器) ─→ AggregateTaskEvent ─(aggregate_task_queue)→           │
│                                                                              │
│  [AGGREGATION SERVICE] ← AggregateTaskEvent                               │
│  - TimeWindowType: HOUR, DAY, WEEK, MONTH                                 │
│  - AggregateMetric:                                                        │
│    ├─ SENTIMENT_DISTRIBUTION (情感分布)                                   │
│    ├─ TOP_KEYWORDS (热门关键词)                                           │
│    ├─ TOP_TOPICS (热门主题)                                               │
│    ├─ POST_TREND (发布趋势)                                               │
│    ├─ ENGAGEMENT_TREND (互动趋势)                                         │
│    └─ USER_ACTIVITY (用户活跃度)                                          │
│                                                                              │
│  操作：                                                                     │
│  - 时间窗口聚合                                                             │
│  - Redis缓存结果                                                            │
│  - PostgreSQL存储结果                                                       │
│                      ↓ AggregationCompleteEvent                           │
│                                                                              │
│  ⚠️  当前缺失实现                                                          │
│                                                                              │
└─────────────────────────────────────────────────────────────────────────────┘

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

核心能力总结：

✅ 已实现 (Implemented)
├─ 爬虫采集框架 (Playwright DAG工作流)
├─ 任务调度系统 (CRON + RabbitMQ)
├─ 数据清洗管道 (多类型支持)
├─ 事件驱动架构 (8个队列定义)
└─ 完整的TypeORM实体模型

❌ 缺失 (Missing)
├─ 数据分析服务 (情感分析、关键词提取)
├─ 数据聚合服务 (报表生成、统计指标)
├─ 分布式协调 (分布式锁、一致性事务)
├─ 错误补偿机制 (DLQ处理、重试策略)
└─ 数据验证层 (Schema验证、字段检查)

⚠️ 需改进 (Improvements)
├─ 增量采集跟踪 (lastCrawlTime)
├─ 重试机制 (指数退避)
├─ 去重策略 (消息级别)
├─ 时区处理 (UTC统一)
└─ 可观测性 (细粒度日志)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

关键文件路径速查：

应用层
├─ apps/crawler/src/
│  ├─ crawl-queue.consumer.ts      // 消费RabbitMQ入口
│  ├─ services/crawler-v2.service.ts // 爬虫核心逻辑
│  ├─ workflow-factory.ts           // 工作流构建
│  └─ config/crawler.config.ts      // 配置定义
├─ apps/broker/src/
│  ├─ services/aggregate-scheduler.service.ts // 聚合调度
│  ├─ weibo/simple-interval-scheduler.service.ts // 任务调度
│  └─ broker.module.ts
└─ apps/cleaner/src/
   ├─ consumers/raw-data.consumer.ts // 消费原始数据
   ├─ services/cleaner.service.ts    // 清洗核心
   └─ tasks/clean-task-factory.ts    // 清洗任务工厂

包层
├─ packages/types/src/
│  ├─ mq/queue-names.ts             // 队列定义
│  ├─ mq/crawl-events.ts            // 爬虫事件
│  ├─ aggregation/time-window.ts    // 聚合事件
│  └─ enums/                        // 枚举定义
├─ packages/entities/src/
│  ├─ weibo-post.entity.ts          // 文章实体
│  ├─ weibo-comment.entity.ts       // 评论实体
│  └─ weibo-search-task.entity.ts   // 任务实体
├─ packages/workflow-core/src/
│  ├─ executor.ts                   // DAG执行引擎
│  └─ types.ts                      // 核心类型
└─ packages/rabbitmq/src/
   ├─ rabbitmq.service.ts           // 统一接口
   ├─ publisher.service.ts          // 发布端
   └─ consumer.service.ts           // 消费端

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
