name: ${COMPOSE_PROJECT_NAME}-dev

services:
  # 后端服务集群 - 所有 NestJS 服务运行在一个容器中
  backend:
    image: imeepos/pro:latest
    container_name: pro-backend-dev
    ports:
      - "${API_PORT:-3000}:3000"        # API 服务
      - "${BROKER_PORT:-3003}:3003"     # Broker 服务
      - "${CRAWLER_PORT:-3001}:3001"    # Crawler 服务
      - "${CLEANER_PORT:-3002}:3002"    # Cleaner 服务
    environment:
      # 通用环境变量
      NODE_ENV: ${NODE_ENV:-development}

      # 数据库连接
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@43.240.223.138:5432/${POSTGRES_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@43.240.223.138:6379
      RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@43.240.223.138:5672
      MONGODB_URL: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@43.240.223.138:27017/pro?authSource=admin

      # MinIO 配置
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_USE_SSL: false
      MINIO_BUCKET: pro-storage

      # 认证配置
      JWT_SECRET: ${JWT_SECRET:-dev-secret-key}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      INTERNAL_API_TOKEN: ${INTERNAL_API_TOKEN:-dev-internal-token}

      # Crawler 专用配置
      CRAWLER_CONCURRENCY: ${CRAWLER_CONCURRENCY:-3}
      CRAWLER_TIMEOUT: ${CRAWLER_TIMEOUT:-30000}

      # Cleaner 专用配置
      CLEANER_SCHEDULE: ${CLEANER_SCHEDULE:-0 2 * * *}
      CLEANER_RETENTION_DAYS: ${CLEANER_RETENTION_DAYS:-30}
      CLEANER_BATCH_SIZE: ${CLEANER_BATCH_SIZE:-100}
    volumes:
      # 开发时挂载源码（可选）
      # - ./apps:/app/apps
      # - ./packages:/app/packages
      # 挂载 PM2 配置
      - ./ecosystem.config.js:/app/ecosystem.config.js:ro
      - ./entrypoint.dev.sh:/usr/local/bin/entrypoint.dev.sh:ro
    entrypoint: ["/usr/local/bin/entrypoint.dev.sh"]
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "/tmp/health_check.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # 资源限制
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Web 前端服务
  web:
    image: imeepos/pro:latest
    container_name: pro-web-dev
    ports:
      - "${WEB_PORT:-8080}:80"
    environment:
      SERVICE_NAME: web
      NODE_ENV: ${NODE_ENV:-development}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # Admin 管理后台
  admin:
    image: imeepos/pro:latest
    container_name: pro-admin-dev
    ports:
      - "${ADMIN_PORT:-8081}:80"
    environment:
      SERVICE_NAME: admin
      NODE_ENV: ${NODE_ENV:-development}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

networks:
  backend:
    name: ${COMPOSE_PROJECT_NAME}_backend_dev
    driver: bridge
  frontend:
    name: ${COMPOSE_PROJECT_NAME}_frontend_dev
    driver: bridge

# 如果需要本地开发数据库，可以取消注释以下部分
# volumes:
#   postgres_data_dev:
#   redis_data_dev:
#   rabbitmq_data_dev:
#   mongo_data_dev:

# 本地开发数据库服务（可选）
# services:
#   postgres:
#     image: postgres:15-alpine
#     container_name: pro-postgres-dev
#     environment:
#       POSTGRES_DB: ${POSTGRES_DB}
#       POSTGRES_USER: ${POSTGRES_USER}
#       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#     volumes:
#       - postgres_data_dev:/var/lib/postgresql/data
#     ports:
#       - "5432:5432"
#     networks:
#       - backend
#     restart: unless-stopped