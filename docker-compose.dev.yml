name: ${COMPOSE_PROJECT_NAME}

services:
  postgres:
    build:
      context: .
      dockerfile: docker/postgres/Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 2g
        reservations:
          cpus: "0.5"
          memory: 512m
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: ${POSTGRES_HEALTHCHECK_INTERVAL}
      timeout: ${POSTGRES_HEALTHCHECK_TIMEOUT}
      retries: ${POSTGRES_HEALTHCHECK_RETRIES}

  redis:
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME}_redis
    restart: unless-stopped
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512m
        reservations:
          cpus: "0.1"
          memory: 128m
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "PING"]
      interval: ${REDIS_HEALTHCHECK_INTERVAL}
      timeout: ${REDIS_HEALTHCHECK_TIMEOUT}
      retries: ${REDIS_HEALTHCHECK_RETRIES}

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: ${COMPOSE_PROJECT_NAME}_rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "${RABBITMQ_AMQP_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1g
        reservations:
          cpus: "0.25"
          memory: 256m
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: ${RABBITMQ_HEALTHCHECK_INTERVAL}
      timeout: ${RABBITMQ_HEALTHCHECK_TIMEOUT}
      retries: ${RABBITMQ_HEALTHCHECK_RETRIES}

  mongo:
    image: mongo:7.0
    container_name: ${COMPOSE_PROJECT_NAME}_mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "${MONGO_PORT}:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "1.5"
          memory: 2g
        reservations:
          cpus: "0.25"
          memory: 512m
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "mongosh --username ${MONGO_INITDB_ROOT_USERNAME} --password ${MONGO_INITDB_ROOT_PASSWORD} --authenticationDatabase admin --eval \"db.adminCommand('ping')\" --quiet",
        ]
      interval: ${MONGO_HEALTHCHECK_INTERVAL}
      timeout: ${MONGO_HEALTHCHECK_TIMEOUT}
      retries: ${MONGO_HEALTHCHECK_RETRIES}

  minio:
    image: minio/minio:RELEASE.2024-04-18T19-09-19Z
    container_name: ${COMPOSE_PROJECT_NAME}_minio
    restart: unless-stopped
    command: server /data --console-address ":${MINIO_CONSOLE_PORT}"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_REGION: ${MINIO_REGION}
    ports:
      - "${MINIO_API_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    volumes:
      - minio_data:/data
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "1.5"
          memory: 2g
        reservations:
          cpus: "0.25"
          memory: 512m
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: ${MINIO_HEALTHCHECK_INTERVAL}
      timeout: ${MINIO_HEALTHCHECK_TIMEOUT}
      retries: ${MINIO_HEALTHCHECK_RETRIES}

  minio-setup:
    image: minio/mc:latest
    container_name: ${COMPOSE_PROJECT_NAME}_minio_setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: ["/bin/sh", "/bootstrap/minio/create-buckets.sh"]
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
      MINIO_REGION: ${MINIO_REGION}
      MINIO_INTERNAL_ENDPOINT: http://minio:9000
    volumes:
      - ./config/minio/scripts:/bootstrap/minio:ro
    networks:
      - backend
    restart: "no"
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: 256m
        reservations:
          cpus: "0.1"
          memory: 64m

  nginx:
    image: nginx:1.25-alpine
    container_name: ${COMPOSE_PROJECT_NAME}_nginx
    restart: unless-stopped
    depends_on:
      minio:
        condition: service_healthy
    ports:
      - "${NGINX_HTTP_PORT}:80"
      - "${NGINX_HTTPS_PORT}:443"
    volumes:
      - ./config/nginx:/etc/nginx/templates:ro
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512m
        reservations:
          cpus: "0.1"
          memory: 128m
    healthcheck:
      test: ["CMD-SHELL", "wget --spider --quiet http://localhost || exit 1"]
      interval: ${NGINX_HEALTHCHECK_INTERVAL}
      timeout: ${NGINX_HEALTHCHECK_TIMEOUT}
      retries: ${NGINX_HEALTHCHECK_RETRIES}

  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: development
    container_name: pro-api
    ports:
      - "${API_PORT:-3000}:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672
      MONGODB_URL: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017/pro?authSource=admin
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_USE_SSL: false
      MINIO_BUCKET: pro-storage
      JWT_SECRET: ${JWT_SECRET:-change-me-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
    volumes:
      - ./apps/api:/app/apps/api
      - ./packages:/app/packages
      - /app/node_modules
      - /app/apps/api/node_modules
    depends_on:
      - postgres
      - redis
      - rabbitmq
      - mongo
      - minio
    networks:
      - backend
    restart: unless-stopped
    command: ["pnpm", "--filter", "@pro/api", "dev"]

  crawler:
    build:
      context: .
      dockerfile: apps/crawler/Dockerfile
      target: development
    container_name: pro-crawler
    ports:
      - "${CRAWLER_PORT:-3001}:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      API_URL: http://api:3000
      RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672
      RABBITMQ_QUEUE: crawler-queue
      MONGODB_URL: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017/pro?authSource=admin
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_USE_SSL: false
      MINIO_BUCKET: pro-storage
      CRAWLER_CONCURRENCY: ${CRAWLER_CONCURRENCY:-5}
      CRAWLER_TIMEOUT: ${CRAWLER_TIMEOUT:-30000}
    volumes:
      - ./apps/crawler:/app/apps/crawler
      - ./packages:/app/packages
      - /app/node_modules
      - /app/apps/crawler/node_modules
    depends_on:
      - api
      - rabbitmq
      - mongo
      - minio
    networks:
      - backend
    restart: unless-stopped
    command: ["pnpm", "--filter", "@pro/crawler", "dev"]

  cleaner:
    build:
      context: .
      dockerfile: apps/cleaner/Dockerfile
      target: development
    container_name: pro-cleaner
    ports:
      - "${CLEANER_PORT:-3002}:3002"
    environment:
      NODE_ENV: development
      PORT: 3002
      API_URL: http://api:3000
      RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672
      RABBITMQ_QUEUE: cleaner-queue
      MONGODB_URL: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017/pro?authSource=admin
      CLEANER_SCHEDULE: ${CLEANER_SCHEDULE:-0 2 * * *}
      CLEANER_RETENTION_DAYS: ${CLEANER_RETENTION_DAYS:-30}
      CLEANER_BATCH_SIZE: ${CLEANER_BATCH_SIZE:-100}
    volumes:
      - ./apps/cleaner:/app/apps/cleaner
      - ./packages:/app/packages
      - /app/node_modules
      - /app/apps/cleaner/node_modules
    depends_on:
      - api
      - rabbitmq
      - mongo
    networks:
      - backend
    restart: unless-stopped
    command: ["pnpm", "--filter", "@pro/cleaner", "dev"]

  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile.dev
    container_name: pro-web-dev
    ports:
      - "${WEB_DEV_PORT:-4200}:4200"
    volumes:
      - ./apps/web:/app/apps/web
      - ./packages:/app/packages
      - /app/node_modules
      - /app/apps/web/node_modules
    environment:
      NODE_ENV: development
    depends_on:
      - api
    networks:
      - frontend
      - backend
    restart: unless-stopped

  admin:
    build:
      context: .
      dockerfile: apps/admin/Dockerfile.dev
      args:
        AMAP_API_KEY: ${AMAP_API_KEY:-YOUR_AMAP_KEY}
    container_name: pro-admin-dev
    ports:
      - "${ADMIN_DEV_PORT:-4201}:4201"
    volumes:
      - ./apps/admin:/app/apps/admin
      - ./packages:/app/packages
      - /app/node_modules
      - /app/apps/admin/node_modules
    environment:
      NODE_ENV: development
    depends_on:
      - api
    networks:
      - frontend
      - backend
    restart: unless-stopped

networks:
  backend:
    name: ${COMPOSE_PROJECT_NAME}_backend
    driver: bridge
  frontend:
    name: ${COMPOSE_PROJECT_NAME}_frontend
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  mongo_data:
  minio_data:
