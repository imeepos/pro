name: ${COMPOSE_PROJECT_NAME}

services:
  postgres:
    build:
      context: ./docker/postgres
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/init:/docker-entrypoint-initdb.d:ro
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 2g
        reservations:
          cpus: "0.5"
          memory: 512m
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: ${POSTGRES_HEALTHCHECK_INTERVAL}
      timeout: ${POSTGRES_HEALTHCHECK_TIMEOUT}
      retries: ${POSTGRES_HEALTHCHECK_RETRIES}

  redis:
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME}_redis
    restart: unless-stopped
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512m
        reservations:
          cpus: "0.1"
          memory: 128m
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "PING"]
      interval: ${REDIS_HEALTHCHECK_INTERVAL}
      timeout: ${REDIS_HEALTHCHECK_TIMEOUT}
      retries: ${REDIS_HEALTHCHECK_RETRIES}

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: ${COMPOSE_PROJECT_NAME}_rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "${RABBITMQ_AMQP_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1g
        reservations:
          cpus: "0.25"
          memory: 256m
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: ${RABBITMQ_HEALTHCHECK_INTERVAL}
      timeout: ${RABBITMQ_HEALTHCHECK_TIMEOUT}
      retries: ${RABBITMQ_HEALTHCHECK_RETRIES}

  mongo:
    image: mongo:7.0
    container_name: ${COMPOSE_PROJECT_NAME}_mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "${MONGO_PORT}:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "1.5"
          memory: 2g
        reservations:
          cpus: "0.25"
          memory: 512m
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "mongosh --username ${MONGO_INITDB_ROOT_USERNAME} --password ${MONGO_INITDB_ROOT_PASSWORD} --authenticationDatabase admin --eval \"db.adminCommand('ping')\" --quiet",
        ]
      interval: ${MONGO_HEALTHCHECK_INTERVAL}
      timeout: ${MONGO_HEALTHCHECK_TIMEOUT}
      retries: ${MONGO_HEALTHCHECK_RETRIES}

  minio:
    image: minio/minio:RELEASE.2024-04-18T19-09-19Z
    container_name: ${COMPOSE_PROJECT_NAME}_minio
    restart: unless-stopped
    command: server /data --console-address ":${MINIO_CONSOLE_PORT}"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_REGION: ${MINIO_REGION}
    ports:
      - "${MINIO_API_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    volumes:
      - minio_data:/data
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "1.5"
          memory: 2g
        reservations:
          cpus: "0.25"
          memory: 512m
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: ${MINIO_HEALTHCHECK_INTERVAL}
      timeout: ${MINIO_HEALTHCHECK_TIMEOUT}
      retries: ${MINIO_HEALTHCHECK_RETRIES}

  minio-setup:
    image: minio/mc:latest
    container_name: ${COMPOSE_PROJECT_NAME}_minio_setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: ["/bin/sh", "/config/create-buckets.sh"]
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
      MINIO_REGION: ${MINIO_REGION}
      MINIO_INTERNAL_ENDPOINT: http://minio:9000
    volumes:
      - ./config/minio/create-buckets.sh:/config/create-buckets.sh:ro
    networks:
      - backend
    restart: "no"
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: 256m
        reservations:
          cpus: "0.1"
          memory: 64m

  nginx:
    image: nginx:1.25-alpine
    container_name: ${COMPOSE_PROJECT_NAME}_nginx
    restart: unless-stopped
    depends_on:
      minio:
        condition: service_healthy
    ports:
      - "${NGINX_HTTP_PORT}:80"
      - "${NGINX_HTTPS_PORT}:443"
    volumes:
      - ./config/nginx:/etc/nginx/templates:ro
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512m
        reservations:
          cpus: "0.1"
          memory: 128m
    healthcheck:
      test: ["CMD-SHELL", "wget --spider --quiet http://localhost || exit 1"]
      interval: ${NGINX_HEALTHCHECK_INTERVAL}
      timeout: ${NGINX_HEALTHCHECK_TIMEOUT}
      retries: ${NGINX_HEALTHCHECK_RETRIES}

networks:
  backend:
    name: ${COMPOSE_PROJECT_NAME}_backend
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  mongo_data:
  minio_data:
