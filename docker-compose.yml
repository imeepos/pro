name: ${COMPOSE_PROJECT_NAME}

services:
  minio:
    image: minio/minio:RELEASE.2024-04-18T19-09-19Z
    container_name: ${COMPOSE_PROJECT_NAME}_minio
    restart: unless-stopped
    command: server /data --console-address ":${MINIO_CONSOLE_PORT}"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_REGION: ${MINIO_REGION}
    ports:
      - "${MINIO_API_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    volumes:
      - minio_data:/data
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "1.5"
          memory: 2g
        reservations:
          cpus: "0.25"
          memory: 512m
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: ${MINIO_HEALTHCHECK_INTERVAL}
      timeout: ${MINIO_HEALTHCHECK_TIMEOUT}
      retries: ${MINIO_HEALTHCHECK_RETRIES}

  nginx:
    image: nginx:1.25-alpine
    container_name: ${COMPOSE_PROJECT_NAME}_nginx
    restart: unless-stopped
    depends_on:
      minio:
        condition: service_healthy
    ports:
      - "${NGINX_HTTP_PORT}:80"
      - "${NGINX_HTTPS_PORT}:443"
    volumes:
      - ./config/nginx:/etc/nginx/templates:ro
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512m
        reservations:
          cpus: "0.1"
          memory: 128m
    healthcheck:
      test: ["CMD-SHELL", "wget --spider --quiet http://localhost || exit 1"]
      interval: ${NGINX_HEALTHCHECK_INTERVAL}
      timeout: ${NGINX_HEALTHCHECK_TIMEOUT}
      retries: ${NGINX_HEALTHCHECK_RETRIES}

  api:
    image: imeepos/api:latest
    container_name: pro-api
    ports:
      - "${API_PORT:-3000}:3000"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@43.240.223.138:5432/${POSTGRES_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@43.240.223.138:5672
      MONGODB_URL: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@43.240.223.138:27017/pro?authSource=admin
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_USE_SSL: false
      MINIO_BUCKET: pro-storage
      JWT_SECRET: ${JWT_SECRET:-change-me-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
    depends_on:
      - minio
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  crawler:
    image: imeepos/crawler:latest
    container_name: pro-crawler
    ports:
      - "${CRAWLER_PORT:-3001}:3001"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      API_URL: http://api:3000
      RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@43.240.223.138:5672
      RABBITMQ_QUEUE: crawler-queue
      MONGODB_URL: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@43.240.223.138:27017/pro?authSource=admin
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_USE_SSL: false
      MINIO_BUCKET: pro-storage
      CRAWLER_CONCURRENCY: ${CRAWLER_CONCURRENCY:-5}
      CRAWLER_TIMEOUT: ${CRAWLER_TIMEOUT:-30000}
      INTERNAL_API_TOKEN: ${INTERNAL_API_TOKEN:-internal-token}
    depends_on:
      - minio
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  cleaner:
    image: imeepos/cleaner:latest
    container_name: pro-cleaner
    ports:
      - "${CLEANER_PORT:-3002}:3002"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3002
      API_URL: http://api:3000
      RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@43.240.223.138:5672
      RABBITMQ_QUEUE: cleaner-queue
      MONGODB_URL: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@43.240.223.138:27017/pro?authSource=admin
      CLEANER_SCHEDULE: ${CLEANER_SCHEDULE:-0 2 * * *}
      CLEANER_RETENTION_DAYS: ${CLEANER_RETENTION_DAYS:-30}
      CLEANER_BATCH_SIZE: ${CLEANER_BATCH_SIZE:-100}
    depends_on:
      - api
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3002/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  broker:
    image: imeepos/broker:latest
    container_name: pro-broker
    ports:
      - "${BROKER_PORT:-3003}:3003"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3003
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@43.240.223.138:5432/${POSTGRES_DB}
      RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@43.240.223.138:5672
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3003/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  web:
    image: imeepos/web:latest
    container_name: pro-web
    ports:
      - "${WEB_PORT:-8080}:80"
    depends_on:
      - api
    networks:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  admin:
    image: imeepos/admin:latest
    container_name: pro-admin
    ports:
      - "${ADMIN_PORT:-8081}:80"
    depends_on:
      - api
    networks:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  backend:
    name: ${COMPOSE_PROJECT_NAME}_backend
    driver: bridge
  frontend:
    name: ${COMPOSE_PROJECT_NAME}_frontend
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  mongo_data:
  minio_data:
