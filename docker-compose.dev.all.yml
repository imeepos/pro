name: ${COMPOSE_PROJECT_NAME}

# ============================================
# 开发环境 Docker Compose - 完整服务编排
# ============================================
# 用途：一键启动所有基础设施和开发容器
# 特性：
# - 使用卷映射实现代码热重载
# - turbo dev 自动监控文件变化
# - 所有服务在一个容器中运行
# ============================================

services:
  # ============================================
  # 基础设施服务
  # ============================================
  postgres:
    image: imeepos/postgres:latest
    container_name: ${COMPOSE_PROJECT_NAME}_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME}_redis
    restart: unless-stopped
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "PING"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: ${COMPOSE_PROJECT_NAME}_rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "${RABBITMQ_AMQP_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo:
    image: mongo:7.0
    container_name: ${COMPOSE_PROJECT_NAME}_mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "${MONGO_PORT}:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - backend
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "mongosh --username ${MONGO_INITDB_ROOT_USERNAME} --password ${MONGO_INITDB_ROOT_PASSWORD} --authenticationDatabase admin --eval \"db.adminCommand('ping')\" --quiet",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:RELEASE.2024-04-18T19-09-19Z
    container_name: ${COMPOSE_PROJECT_NAME}_minio
    restart: unless-stopped
    command: server /data --console-address ":${MINIO_CONSOLE_PORT}"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_REGION: ${MINIO_REGION}
    ports:
      - "${MINIO_API_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    volumes:
      - minio_data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio-setup:
    image: minio/mc:latest
    container_name: ${COMPOSE_PROJECT_NAME}_minio_setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: ["/bin/sh", "/bootstrap/minio/create-buckets.sh"]
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
      MINIO_REGION: ${MINIO_REGION}
      MINIO_INTERNAL_ENDPOINT: http://minio:9000
    volumes:
      - ./config/minio/scripts:/bootstrap/minio:ro
    networks:
      - backend
    restart: "no"

  # ============================================
  # 开发容器 - 所有应用服务
  # ============================================
  dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: ${COMPOSE_PROJECT_NAME}_dev
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mongo:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      # Node 环境
      NODE_ENV: development

      # API 配置
      PORT: 3000
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672
      MONGODB_URL: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017/pro?authSource=admin

      # MinIO 配置
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_USE_SSL: false
      MINIO_BUCKET: ${MINIO_BUCKET_NAME}

      # JWT 配置
      JWT_SECRET: ${JWT_SECRET:-dev-secret-key}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}

      # Crawler 配置
      CRAWLER_CONCURRENCY: ${CRAWLER_CONCURRENCY:-3}
      CRAWLER_TIMEOUT: ${CRAWLER_TIMEOUT:-30000}
      INTERNAL_API_TOKEN: ${INTERNAL_API_TOKEN:-dev-token}

      # Cleaner 配置
      CLEANER_SCHEDULE: ${CLEANER_SCHEDULE:-0 2 * * *}
      CLEANER_RETENTION_DAYS: ${CLEANER_RETENTION_DAYS:-30}
      CLEANER_BATCH_SIZE: ${CLEANER_BATCH_SIZE:-100}
    ports:
      # 后端服务
      - "${API_PORT:-3000}:3000"      # API
      - "${CRAWLER_PORT:-3001}:3001"  # Crawler
      - "${CLEANER_PORT:-3002}:3002"  # Cleaner
      - "${BROKER_PORT:-3003}:3003"   # Broker
      # 前端服务
      - "4200:4200"                    # Web
      - "4201:4201"                    # Admin
    volumes:
      # 源代码映射 - 实现热重载
      - ./apps:/app/apps
      - ./packages:/app/packages
      - ./tsconfig.base.json:/app/tsconfig.base.json
      - ./turbo.json:/app/turbo.json
      # 排除 node_modules 和构建产物
      - /app/node_modules
      - /app/apps/*/node_modules
      - /app/packages/*/node_modules
      - /app/apps/*/dist
      - /app/packages/*/dist
    networks:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

networks:
  backend:
    name: ${COMPOSE_PROJECT_NAME}_backend
    driver: bridge
  frontend:
    name: ${COMPOSE_PROJECT_NAME}_frontend
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  mongo_data:
  minio_data:
