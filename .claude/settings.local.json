{
  "permissions": {
    "allow": [
      "Bash(LATEST_IMAGE_NAME=\"docker.io/imeepos/broker:latest\")",
      "Bash(bun:*)",
      "Bash(docker compose:*)",
      "Bash(cat:*)",
      "Bash(tree:*)",
      "Bash(git add:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\nfeat: 为 @pro/types 创建极简优化的 Dockerfile\n\n优化策略：\n- 五层缓存设计：workspace 配置 → 依赖声明 → 依赖安装 → TS 配置 → 源码构建\n- BuildKit cache mount 加速依赖安装\n- 多阶段构建：builder（构建） + production（产物）\n- 生产镜像仅包含 package.json 和 dist/\n\n性能收益：\n- 源码修改仅影响最后一层，前四层可完全复用缓存\n- 依赖安装使用持久化缓存，显著提升构建速度\n- 作为项目最底层包，为其他包的构建提供坚实基础\n\n🤖 Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit -m \"$(cat <<''EOF''\nfeat: 创建统一的 Docker 基础镜像\n\n提取所有服务的公共依赖到 docker/base/Dockerfile：\n- 基于 node:20-alpine\n- 包含 bun、curl、dumb-init、git\n- 创建标准用户 nestjs:nodejs (1001:1001)\n- 配置 /app 工作目录和权限\n- 优化层缓存策略\n\n🤖 Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit:*)",
      "Bash(git log:*)",
      "Bash(git check-ignore:*)",
      "Bash(docker build:*)",
      "Bash(git push:*)",
      "Bash(docker inspect:*)",
      "Bash(docker history:*)",
      "Bash(awk:*)",
      "Bash(bash:*)",
      "Bash(/home/ubuntu/worktrees/pro/scripts/build-image.sh:*)",
      "Bash(docker rmi:*)",
      "Bash(./scripts/build-image.sh:*)",
      "Bash(chmod:*)",
      "Bash(docker logs:*)",
      "Bash(docker exec:*)",
      "Bash(docker buildx du:*)",
      "Bash(docker system df:*)",
      "Bash(docker image inspect:*)",
      "Bash(git pull:*)",
      "Bash(git restore:*)",
      "Bash(find:*)",
      "Bash(docker run:*)",
      "WebFetch(domain:blog.csdn.net)",
      "WebSearch",
      "Bash(dir:*)",
      "Bash(ng build)",
      "Bash(ng lint)",
      "Bash(ng serve:*)",
      "Bash(curl:*)",
      "WebFetch(domain:angular.dev)",
      "WebFetch(domain:docs.nestjs.com)",
      "Bash(pnpm run build:*)",
      "Read(//home/ubuntu/**)",
      "Bash(pnpm run typecheck:*)",
      "Bash(/dev/null)",
      "WebFetch(domain:lbs.amap.com)",
      "WebFetch(domain:ng.ant.design)",
      "WebFetch(domain:flowbite-angular.com)",
      "Bash(pm2:*)",
      "Bash(pnpm install)",
      "Bash(npx tsc:*)",
      "WebFetch(domain:www.apollographql.com)",
      "Bash(pnpm run test)",
      "Bash(pnpm run codegen:*)",
      "Bash(npx graphql-codegen:*)",
      "Bash(npx @graphql-codegen/cli:*)",
      "Bash(./node_modules/.bin/graphql-codegen:*)",
      "Bash(timeout 120 pnpm run:*)",
      "Bash(pnpm add:*)",
      "Bash(psql:*)",
      "Bash(timeout 300 pnpm run:*)",
      "Bash(timeout 60 pnpm run typecheck:*)",
      "Bash(pnpm run)",
      "Bash(pnpm list @nestjs/mongoose mongoose)",
      "Bash(timeout 30 pnpm run start)",
      "Bash(timeout 10 pnpm run start)",
      "Bash(node dist/main.js)",
      "Bash(timeout 10 node dist/main.js)",
      "Bash(git diff --name-only --diff-filter=U)",
      "Bash(pnpm list @nestjs/mongoose)",
      "Bash(pnpm run --filter=@pro/admin build)",
      "Bash(pnpm list:*)",
      "Bash(pnpm ls:*)",
      "Bash(lsof:*)",
      "Bash(netstat:*)",
      "Bash(ss:*)",
      "Bash(sort:*)",
      "Bash(timedatectl:*)",
      "Bash(echo:*)",
      "Bash(node:*)",
      "WebFetch(domain:github.com)",
      "Bash(pkill -f \"pnpm run build\")",
      "Bash(pnpm run:*)",
      "WebFetch(domain:docs.temporal.io)",
      "Bash(timeout 10 pnpm run main:*)"
    ],
    "deny": [],
    "ask": []
  }
}
